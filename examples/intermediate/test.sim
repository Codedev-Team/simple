call simple/io/Filesim" call simple/debugging/Throwsim" call simple/core/Stringsim" call simple/utilities/Typesim"  block main) sourceFile = null sourceFilePath = null sourceFileContent = null cmdparamsLen = lengthOfcmdparams) for a = 0 to cmdparamsLen { if cmdparamsa] = s" | cmdparamsa] = source" { sourceFilePath = cmdparamsa] else }} if sourceFilePath = null { sourceFile = new FilesourceFilePath) if sourceFileexists) { sourceFileContent = sourceFilereadFileAsString)sourceFileabsolutePath) value = minifySourcesourceFileContent) file = new File/testsim)  filewritevalue) else throwsourceFileabsolutePath" : does not exists)}} block minifySourcesource) minifiedSource = " type = 1 sourceLen = lengthOfsource) for i = 0 to sourceLen { if type = 0 and sourcei] = tab or sourcei] = nl or sourcei] = crlf or sourcei] = cr { if isWhiteSpacesourcei1) or isPunctuationsourcei1) { minifiedSource = "  else minifiedSource = " " } elif type = 0 and isPunctuationsourcei) and sourcei] = /" and sourcei1] = ") if isWhiteSpacesourcei1) { minifiedSource = sourcei]} elif type = 1  if sourcei] = '' and sourcei1] = /' and sourcei2] = ' or sourcei2] = ) { i+ type = 0 else } elif sourcei] = /' and sourcei1] = '' and type = 0  i+ type = 1 elif type = 0 and sourcei] = " and sourcei1] = '  while sourcei1] = cr { if i < sourceLen { i+ else }} else minifiedSource= sourcei]}} return trimStringminifiedSource) block nextCharactersource) name = this is testing   sas    "