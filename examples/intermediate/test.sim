call"simple/io/File.sim" call"simple/debugging/Throw.sim" call"simple/core/String.sim" call"simple/utilities/Type.sim" blockmain() sourceFile=null sourceFilePath=null sourceFileContent=null cmdparamsLen=lengthOf(cmdparams) fora=0tocmdparamsLen{ ifcmdparams[a]=="-s"||cmdparams[a]=="--source"{sourceFilePath=cmdparams[a++] else}} ifsourceFilePath!=null{ sourceFile=newFile(sourceFilePath) ifsourceFile.exists(){ sourceFileContent=sourceFile.readFileAsString()@sourceFile.absolutePath() value=minifySource(sourceFileContent) file=newFile("./test.sim") file.write(value) else throw(sourceFile.absolutePath()+":doesnotexists")}} blockminifySource(source) minifiedSource="" type=1 sourceLen=lengthOf(source) fori=0tosourceLen{ iftype==0andsource[i]==taborsource[i]==nlorsource[i]==crlforsource[i]==cr{ ifisWhiteSpace(source[i+1])orisPunctuation(source[i+1]){ minifiedSource+="" else minifiedSource+=""} eliftype==0andisWhiteSpace(source[i]) ifisPunctuation(source[i+1]){ minifiedSource+=""} eliftype==1 ifsource[i]=='*'andsource[i+1]=='/'and(source[i+2]!='"'orsource[i+2]!="'"){ i++type=0 else} elifsource[i]=='/'andsource[i+1]=='*'andtype==0 i++ type=1 eliftype==0andsource[i]=="#"andsource[i+1]!='"' whilesource[i+1]!=cr{ ifi<sourceLen{ i++ else}} else minifiedSource+=source[i]}} returntrimString(minifiedSource) blocknextCharacter_(source) name="thisistestingsas"