#this is out
/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang
*/

/* 
 * @Filename - minifysimplesource.sim
 * @Author - Azeez Adewale
 * @Date - 09 August 2018
 * @Time - 10:55 PM
 */

call "simple/io/File.sim"
call "simple/debugging/Throw.sim"
call "simple/core/String.sim"
call "simple/utilities/Type.sim"

skipRequest = false
 
block main()
	sourceFile = null
	sourceFilePath = null
	sourceFileContent = null
	cmdparamsLen = lengthOf(cmdparams)
	for a = 0 to cmdparamsLen {
		if cmdparams[a] == "-s" || cmdparams[a] == "--source" { sourceFilePath = cmdparams[a++]
		elif cmdparams[a] == "-y" || cmdparams[a] == "--yes" skipRequest = true
		else }
	}
	if sourceFilePath != null {
		sourceFile = new Path(sourceFilePath)
		if sourceFile.isADirectory() {
			minifySourceDir(sourceFile.toDirectory())
		elif sourceFile.isAFile()
			minifySourceFile(sourceFile.toFile())
		}
		__exit__
		if sourceFile.exists() {
			
		else
			throw(sourceFile.absolutePath()+" : does not exists")
		}
		
	}
	
block minifySourceDir(sourceDir)
	files = sourceDir.listFiles()
	filesLen = lengthOf(files)
	for b = 0 to filesLen {
		minifySourceFile(files[b])
	}
	dirs = sourceDir.listDirectories()
	dirsLen = lengthOf(dirs)
	for b = 0 to dirsLen {
		@"moving into directory : "+dirs[b].absolutePath()
		minifySourceDir(dirs[b])
	}
	
block minifySourceFile(sourceFile)
	if !stringEndsWith(sourceFile.name(),".sim") {
		@sourceFile.name()+" : not a simple source file (*.sim) skipping..."
		return
	}
	if !skipRequest {
		display sourceFile.name()+" : do you want to minify this file? " read res
		if res != "y" and res != "yes" {
			return
		}
	}
	source = " "+sourceFile.readFileAsString()
	if stringGetLineCount(source) < 1 {
		@sourceFile.name()+" : already minified"
		return
	}
	display sourceFile.name()+" : minification starting..."
	minifiedSource = ""
	TOKEN_IDENTIFIER =  0 TOKEN_MULTILINE_COMMENT = 1 TOKEN_LITERAL = 2
	type = TOKEN_IDENTIFIER
	sourceLen = lengthOf(source)
	for i = 0 to sourceLen {
		switch type {
			case TOKEN_IDENTIFIER
		
		}
		if type == 0 and source[i] == tab or source[i] == nl or source[i] == crlf or source[i] == cr {
			if isWhiteSpace(source[i+1]) or (isPunctuation(source[i+1]) and source[i+1] != '_' and source[i+1] != '$' ) {
				minifiedSource += "" 
			else
				minifiedSource += " " 
			}
		elif source[i] == '/' and source[i+1] == '*' and type == 0 
			i++
			type = 1
		elif type == 1 
			if source[i] == '*' and source[i+1] == '/' and (source[i+2] != '"' or source[i+2] != "'") {
				i++ type = 0
			else 
				
			}
		elif type == 0 and source[i] == '"' 
			minifiedSource+= '"'
			type = 2
		elif type == 2 
			minifiedSource+= source[i]
			if source[i] == '"' {
				type = 0
			}
		elif type == 0 and source[i] == "#" and source[i+1] != '"' 
			while source[i+1] != cr and source[i+1] != nl and source[i+1] != crlf {
				if i < sourceLen {
					i++
				else 
					
				}
			}
		elif type == 0 and isPunctuation(source[i]) and (source[i] != "/" and source[i+1] != "*")
			if isWhiteSpace(source[i+1]) {
				minifiedSource += source[i]
				i++
			else
				minifiedSource += source[i]
			}
		else
			minifiedSource+= source[i]
		}
		
	}
	sourceFile = new File("./test.sim")
	sourceFile.write(trimString(minifiedSource))
	@" (done)"

block nextCharacter_(source)
	name = "this is testing   sas    "


