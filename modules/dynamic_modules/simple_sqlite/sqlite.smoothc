
Prefix=sqlite
LibName=simple_sqlite
FileName=sqlite
Module=sqlite
ReadIncludesFile=false
SimpleWrapper=false
Makefile=false
IncludeDir=
SourceDir=
LDLIBSOPTIONS=

[IncludesFile] {
	"sqlite3.h"
}

[StructInit] {
	sqlite3
	sqlite3_stmt
	sqlite3_context
}

[ExportFunctions]{
	SQLITE_API int sqlite3_close(sqlite3*);
	SQLITE_API int sqlite3_close_v2(sqlite3*);
	SQLITE_API int sqlite3_open(const char *filename, sqlite3 **ppDb);
	SQLITE_API int sqlite3_open16(const void *filename, sqlite3 **ppDb);
	SQLITE_API int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs);
	SQLITE_API int sqlite3_errcode(sqlite3 *db);
	SQLITE_API int sqlite3_extended_errcode(sqlite3 *db);
	SQLITE_API const char *sqlite3_errmsg(sqlite3*);
	SQLITE_API const void *sqlite3_errmsg16(sqlite3*);
	SQLITE_API const char *sqlite3_errstr(int);
	SQLITE_API int sqlite3_initialize(void);
	SQLITE_API int sqlite3_shutdown(void);
	SQLITE_API int sqlite3_os_init(void);
	SQLITE_API int sqlite3_os_end(void);
	SQLITE_API int sqlite3_extended_result_codes(sqlite3*, int onoff);
	SQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);
	SQLITE_API int sqlite3_changes(sqlite3*);
	SQLITE_API int sqlite3_total_changes(sqlite3*);
	SQLITE_API void sqlite3_interrupt(sqlite3*);
	SQLITE_API int sqlite3_complete(const char *sql);
	SQLITE_API int sqlite3_complete16(const void *sql);
	SQLITE_API int sqlite3_busy_timeout(sqlite3*, int ms);
	SQLITE_API void *sqlite3_malloc(int);
	SQLITE_API void sqlite3_free(void*);
	SQLITE_API sqlite3_int64 sqlite3_memory_used(void);
	SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);
	SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);
	SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);
	SQLITE_API sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);
	SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
	SQLITE_API int sqlite3_prepare(sqlite3 *db,const char *zSql,int nByte,sqlite3_stmt **ppStmt,const char **pzTail);
	SQLITE_API int sqlite3_prepare_v2(sqlite3 *db,const char *zSql,int nByte,sqlite3_stmt **ppStmt,const char **pzTail);
	SQLITE_API int sqlite3_prepare16(sqlite3 *db,const void *zSql,int nByte,sqlite3_stmt **ppStmt,const void **pzTail);
	SQLITE_API int sqlite3_prepare16_v2(sqlite3 *db,const void *zSql,int nByte,sqlite3_stmt **ppStmt,const void **pzTail);
	SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt);
	SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);
	SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt*);
	sqlite3_exec[RegisterOnly]
}

[Variables] {
	int SQLITE_OK
	int SQLITE_ERROR
	int SQLITE_INTERNAL
	int SQLITE_PERM
	int SQLITE_ABORT 
	int SQLITE_BUSY
	int SQLITE_LOCKED
	int SQLITE_NOMEM 
	int SQLITE_READONLY 
	int SQLITE_INTERRUPT 
	int SQLITE_IOERR 
	int SQLITE_CORRUPT 
	int SQLITE_NOTFOUND
	int SQLITE_FULL 
	int SQLITE_CANTOPEN  
	int SQLITE_PROTOCOL 
	int SQLITE_EMPTY  
	int SQLITE_SCHEMA 
	int SQLITE_TOOBIG
	int SQLITE_CONSTRAINT
	int SQLITE_MISMATCH 
	int SQLITE_MISUSE
	int SQLITE_NOLFS 
	int SQLITE_AUTH 
	int SQLITE_FORMAT
	int SQLITE_RANGE  
	int SQLITE_NOTADB
	int SQLITE_NOTICE 
	int SQLITE_WARNING
	int SQLITE_ROW
	int SQLITE_DONE
	int SQLITE_IOERR_READ 
	int SQLITE_IOERR_SHORT_READ 
	int SQLITE_IOERR_WRITE      
	int SQLITE_IOERR_FSYNC        
	int SQLITE_IOERR_DIR_FSYNC
	int SQLITE_IOERR_TRUNCATE  
	int SQLITE_IOERR_FSTAT  
	int SQLITE_IOERR_UNLOCK
	int SQLITE_IOERR_RDLOCK 
	int SQLITE_IOERR_DELETE   
	int SQLITE_IOERR_BLOCKED   
	int SQLITE_IOERR_NOMEM  
	int SQLITE_IOERR_ACCESS  
	int SQLITE_IOERR_CHECKRESERVEDLOCK
	int SQLITE_IOERR_LOCK    
	int SQLITE_IOERR_CLOSE  
	int SQLITE_IOERR_DIR_CLOSE 
	int SQLITE_IOERR_SHMOPEN     
	int SQLITE_IOERR_SHMSIZE    
	int SQLITE_IOERR_SHMLOCK   
	int SQLITE_IOERR_SHMMAP    
	int SQLITE_IOERR_SEEK       
	int SQLITE_IOERR_DELETE_NOENT 
	int SQLITE_IOERR_MMAP           
	int SQLITE_IOERR_GETTEMPPATH    
	int SQLITE_IOERR_CONVPATH    
	int SQLITE_LOCKED_SHAREDCACHE   
	int SQLITE_BUSY_RECOVERY        
	int SQLITE_BUSY_SNAPSHOT  
	int SQLITE_CANTOPEN_NOTEMPDIR  
	int SQLITE_CANTOPEN_ISDIR   
	int SQLITE_CANTOPEN_FULLPATH 
	int SQLITE_CANTOPEN_CONVPATH  
	int SQLITE_CORRUPT_VTAB      
	int SQLITE_READONLY_RECOVERY 
	int SQLITE_READONLY_CANTLOCK 
	int SQLITE_READONLY_ROLLBACK 
	int SQLITE_READONLY_DBMOVED 
	int SQLITE_ABORT_ROLLBACK 
	int SQLITE_CONSTRAINT_CHECK  
	int SQLITE_CONSTRAINT_COMMITHOOK 
	int SQLITE_CONSTRAINT_FOREIGNKEY
	int SQLITE_CONSTRAINT_FUNCTION 
	int SQLITE_CONSTRAINT_NOTNULL  
	int SQLITE_CONSTRAINT_PRIMARYKEY 
	int SQLITE_CONSTRAINT_TRIGGER  
	int SQLITE_CONSTRAINT_UNIQUE  
	int SQLITE_CONSTRAINT_VTAB    
	int SQLITE_CONSTRAINT_ROWID     
	int SQLITE_NOTICE_RECOVER_WAL   
	int SQLITE_NOTICE_RECOVER_ROLLBACK
	int SQLITE_WARNING_AUTOINDEX
	int SQLITE_AUTH_USER             
}

[IgnoreInHeader]{
	"SQLITE_API "
	"SQLITE_EXTERN "
	"__declspec(dllimport) "
}

[NumberType]{
	uchar
	sqlite3_int64
}

[Code]{

#ifdef _WIN32
	#define SIMPLE_API __declspec(dllexport)
#else
#if defined(_MSC_VER)
    //  Microsoft 
    #define SIMPLE_API __declspec(dllexport)
    #define SIMPLE_API __declspec(dllimport)
#elif defined(__GNUC__)
    //  GCC
    #define SIMPLE_API __attribute__((visibility("default")))
#else
    //  do nothing and hope for the best?
    #define SIMPLE_API
    #define SIMPLE_API
    #pragma warning Unknown dynamic link import/export semantics.
#endif
#endif

int sqlite_exec_callback ( void *data, int argc, char **argv, char **ColName )
{
	List *list, *list2  ;
	int x  ;
	list = (List *) data ;
	list = simple_list_newlist(list);
	for ( x = 0 ; x < argc ; x++ ) {
		list2 = simple_list_newlist(list);
		simple_list_addstring(list2,ColName[x]);
		simple_list_addstring(list2,argv[x] ? argv[x] : "NULL");
	}
	return 0 ;
}

SIMPLE_BLOCK(sqlite_sqlite3_exec)
{
	sqlite3 *_sqlite  ;
	int rc  ;
	List *list  ;
	char *errMsg  ;
	errMsg = NULL ;
	if ( SIMPLE_API_PARACOUNT != 2 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISPOINTER(1) && SIMPLE_API_ISSTRING(2) ) {
		_sqlite = (sqlite3 *) SIMPLE_API_GETCPOINTER(1,"SMOOTHC_SQLITE") ;
		if ( _sqlite == NULL ) {
			return ;
		}
		if ( _sqlite ) {
			list = SIMPLE_API_NEWLIST ;
			rc = sqlite3_exec(_sqlite,SIMPLE_API_GETSTRING(2),sqlite_exec_callback,(void *) list,&errMsg);
			SIMPLE_API_RETLIST(list);
		}
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

}