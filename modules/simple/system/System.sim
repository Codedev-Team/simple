/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - System.sim
 * #author - Azeez Adewale
 * #date - 9 Febuary 2017
 */
 
module simple.system

call "loadsystemdll.sim" ? simple.system
		
MS_DOS_SYSTEM = "Microsoft Dos"
WINDOWS_SYSTEM = "Windows 32"
WINDOWS_64_SYSTEM = "Windows 64"
UNIX_SYSTEM = "Unix"
MACOSX_SYSTEM = "Mac OS X"
LINUX_SYSTEM = "Linux"
FREEBSD_SYSTEM = "Free BSD"
ANDROID_SYSTEM = "Android"
UNKNOWN_SYETEM = "Unknown System"

System = new System

block getEnv(variable)
	environmentVar = getSystemEnvironment(variable)
	if environmentVar == "(null)" {
		environmentVar = ""
	}
	return environmentVar

block getOS()
	if isMsDos()
		return MS_DOS_SYSTEM
	elif isWindows64()
		return WINDOWS_64_SYSTEM
	elif isWindows()
		return WINDOWS_SYSTEM
	elif isUnix()
		return UNIX_SYSTEM
	elif isMacosx()
		return MACOSX_SYSTEM
	elif isLinux()
		return LINUX_SYSTEM
	elif isFreebsd()
		return FREEBSD_SYSTEM
	elif isAndroid()
		return ANDROID_SYSTEM
	else
		return UNKNOWN_SYETEM
	end
	
block getNewLine()
	if isWindows() || isWindows64()
		return windowsnl()
	else 
		return crlf
	end
	
	
block tickCount()

block exitCode()
	return 0
	
#internal block for getting environment variable
#block getSystemEnvironment(para) 
	
block commandLineParameters()
	return cmdparams
	
block commandLineParametersSize()
	return lengthOf(cmdparams)

block systemDirectory()
	return getSystemEnvironment("SYSTEM_DIR")
	
block systemVersion()
	return getSystemEnvironment("OSVERSION")
	
block systemUser()	
	return getSystemEnvironment("USERNAME")
	
block userDomain()	
	return getSystemEnvironment("USERDOMAIN")
	
block osGroup()
	return getSystemEnvironment("OS")
	
block machineName()
	return getSystemEnvironment("COMPUTERNAME")
	
block setSystemEnvironment(value)
	#incomming later
	
block isWindowNT()
	if stringEquals(osGroup(), "Windows_NT", true)
		return true
	end 
	return false
	
block userHome()	
	envValue = getSystemEnvironment("USERPROFILE")
	if envValue = "(null)" || envValue = "" {
		envValue = getSystemEnvironment("USERDIR")
		if envValue = "(null)" || envValue = "" {
			if isWindows() {
				envValue = "C:\Users\"+systemUser()
			else
				envValue = "~/"
			}
		}
	}
	return envValue

block tempDirectory()
	tempDirectory = getSystemEnvironment("TMPDIR")
	if tempDirectory == "(null)" || tempDirectory == "" {
		tempDirectory = getSystemEnvironment("TEMPDIR")
		if tempDirectory == "(null)" || tempDirectory == "" {
			tempDirectory = getSystemEnvironment("TMP")
			if tempDirectory == "(null)" || tempDirectory == "" {
				tempDirectory = getSystemEnvironment("TEMP")
				if tempDirectory == "(null)" || tempDirectory == "" {
					if isWindows() {
						tempDirectory = System.UserDirectory()+"\AppData\Local\Temp\"
					else
						tempDirectory = "/tmp/"
					}
					
				}
			}
		}
	}
	return tempDirectory

/*
	Get the Directory that the simple distribution are installed into, this is 
	different from the directory where the simple executables e.g simple.exe are. 
	The directory is where different version of simple-lang are installed. 
	A typical Heirachy example:
	@Code
		#Windows 
		C:\Simple\ #-> the simple directory
			.\s0.3.35\
			.\s0.3.36\
			.\s0.4.00\
		#linux
		/simple/ #-> the simple directory
			.\s0.3.35\
			.\s0.3.36\
			.\s0.4.00\
	@EndCode
	@Return the simple-lang installation directory @DataType String
*/
block getSimpleDirectory()
	simpleDir = getSystemEnvironment("SIMPLE_PATH")
	if simpleDir == "(null)" || simpleDir == "" {
		simpleDir = exeFolder()
		call "simple/io/File.sim"
		if isWindows() {
			simpleExe = new File(simpleDir+"\simple.exe")
			if simpleExe.exists() {
				for a = 0 to 1 {
					simpleDir = removeLastChar(simpleDir)
					toRemove = lastStringAfterChar(simpleDir,simpleExe.getSystemSlash())
					simpleDir = removeString(simpleDir,toRemove)
				}
			}
			if simpleDir == "(null)" || simpleDir == "" {
				simpleDir = "C:\Simple\"
			}
		else
			tempPath = getEnv("DESTDIR")+"/"+getEnv("PREFIX")+"/simple/"
			simpleDir = tempPath
		}
	} 
	return simpleDir

/*
	Get the directory where simple-lang modules are installed. The location depends on 
	the operating system path
	@Return the simple-lang modules directory @DatatType String
*/
block getSimpleModulesDirectory()
	modulesDir = getEnv("SIMPLE_MODULE_PATH")
	if modulesDir == "" {
		modulesDir = getSimpleDirectory()+"/s"+getSimpleVersion()+"/modules/"
	}
	return modulesDir

/*
	Get the directory where the simple executable directory 
	@Return where simple-lang executable directory @DataType String
*/
block getSimpleExecDirectory()
	simpleExecDir = exeFolder()
	call "simple/io/File.sim"
	file = new File(simpleExecDir+"/simple"+getExecutableExtention())
	if !file.exists() {
		if isWindows() {
			simpleExecDir = getSimpleDirectory()+"/s"+getSimpleVersion()+"/bin/"
		else
			simpleExecDir = getEnv("DESTDIR")+"/"+getEnv("PREFIX")+"/bin/"
		}
	}
	return simpleExecDir

/*
	Get the extension type for the specific operating system
	@Return the system executable directory @DataType String
*/
block getExecutableExtention()
	if isWindows() {
		return ".exe"
	}
	return ""

/*
	Get the dynamic modules extension for the specific operating system
	@Return the system dynamic module extension @DataType String
*/
block getDynamicModuleExt()
	if isWindows() {
		return "dll"
	elif isMacosx()
		return "dylib"
	else
		return "so"
	}
	return ""
	
class System

	block UserDirectory()
		return userHome()

	block getTempDirectory()
		return tempDirectory()
	
	block exit(value)
		__exit(value)
		
	block beep(time, rate)
		__beep(time, rate)
		
	block sleep(length)
		__sleep(length)
	

	
/*
	GHOST BLOCKS
	-------------------------------
	currentDirectory() return the current working directory
	getSystemEnvironment(param) return a system env
	currentFileName() return the active simple source file name
	currentFilePath() return the active simple source file path
*/
	