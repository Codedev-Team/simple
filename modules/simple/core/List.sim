module simple.core call "Object.sim" block addToList(list,value)        if (isList(value)||isString(value)||isNumber(value))        list +value return list        else            display  __err__ end block removeFromList(list,indexNumber)        if(isNumber(indexNumber))        list[indexNumber]=""        return list +crlf        else            display __err__ end block reverseList(List)            x =0            list =[]                        do {list +List[lengthOf(List)-x]x++}while x <lengthOf(List)+1            List =list            return List end block indexOf(List,value) if (isList(List)) return List[value] end class List :Object    __OBJECT_NAME ="List"    __OBJECT=[]    block List(list) try  if (list.getType()==getType()){ this.__OBJECT =list.object()} return catch end if !isList(list)&&!isString(list){throw(this.errorType(1))}        __OBJECT =list        return __OBJECT    block indexOf(n) if n >length(){throw(this.errorType(3))} if isNumber(n) return __OBJECT[n] else  throw(this.errorType(2)) end block length() return lengthOf(__OBJECT)    block push(x)        __OBJECT +x        return __OBJECT    block pop(x)        __OBJECT[x]=""        return __OBJECT    block keys()        return __OBJECT    block reverse()        x =0        reverserArray =[]        do {            reverserArray +__OBJECT[lengthOf(__OBJECT)-x]x++        }while x <lengthOf(__OBJECT)+1        __OBJECT =reverserArray        return __OBJECT    end block slice(x,y) if (isNumber(x)&&isNumber(y)) if (x =0 &&y =0) return __OBJECT end if (__OBJECT.indexOf(x +1)==__OBJECT.indexOf(y)) return __OBJECT[x] elif (__OBJECT.indexOf(x +1) !=__OBJECT.indexOf(y)) do { return __OBJECT.indexOf(x++-1)}while x <__OBJECT.indexOf(y) else return "[]" end         end     block sort(a,b)         return __OBJECT[b]-__OBJECT[a] block map(n,index) private block errorType(type) __NOT_LIST_ERROR ="the parameter is not a list" __NUMBER_REQUIRED_ERROR ="only number is required as parameter " __INDEX_GREATER_THAN_SIZE ="the provided n index is greater than list size" switch (type) case 1@__NOT_LIST_ERROR case 2@__NUMBER_REQUIRED_ERROR case 3@__INDEX_GREATER_THAN_SIZE default throw("Exit !")__exit(0)__ end