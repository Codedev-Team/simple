/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - String.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */
 
module simple.core

call "Object.sim"
call simple.utilities.Conversion
call simple.core.DynamicLoader
call simple.debugging.Throw
callModule("string_savant")

		__Empty = char(0) 
		STRING_EMPTY = "The string provided is empty"
		STRING_COMPARE_ERROR = "Array index out of bound : The length of the comparing string is greater than the main string "
		STRING_LESS = "Array index out of bound : The string is empty" 
		BACKSPACE = char(8) 
		END_OF_LINE = char(13)
		LINE_BREAK = char(10)
		
block strContains(value,check) #check empty for all __substr call
	if check == "" { return true /* error */ }
	if __substr(value,check) < 0
		return false
	end 
	return true

block strConcat(str, v)
	return str + v

block removeStr(str, o)
	if o == "" { return str }
	return __substr(str,o,"")
	
block removeStrAt(str, index)
	warn("String module still in development")
	strLength = lengthOf(str)
	if (index > strLength)
		return str
	else
		first = __substr(str,0,index-1) 
		#@"first : "+first
		#@strLength
		#@strLength - 5
		last = __substr(str,index+1,5) 
		#@"last : "+last
		return (first + last)
	end
	
block removeStrAfterIndex(str,index)
	#extlen = lengthOf(lastStringAfterChar(link, '.'))
	#			for a = 0 to 
	#			link = replaceString(link,lastStringAfterChar(link, '.'), 'html')
	
block removeFirstChar(str)
	return removeStringAt(str, 0)
	
block removeLastChar(str)
	return __substr(str,0,lengthOf(str)-2)

block replaceStr(s, o, n)
	return __substr(s,o,n)

block strSubStr(str, index,offset)
	return __substr(str, index, offset)

block strGetLineCount(str)
	return __lines(str)

block strEndsWith(m, s)
	if m == null or s == null return false end 
	strLength = lengthOf(s) - 1
	mLength = lengthOf(m) - 1
	if strLength > mLength
		return false #throw(STRING_COMPARE_ERROR)
	end 
	beginSearch = mLength - strLength
	beginCount = 0 
	for a = beginSearch to mLength
		try 
			if m[a] != s[beginCount]
				return false
			end
		catch 
			return false
		end
		beginCount++
	end
	return true

block strCopy(str, count)
	return __copy(str, count)

block trimStr(str)
	return __trim(str)

block strRight(str, index)
	return __right(str, index)

block strLeft(str, index)
	return __left(str, index)

block isStrNull(s)
	return s == null

block strFirstChar(c) 
	if lengthOf(c) < 1
		throw(STRING_LESS)
	end
	return c[0]
	
block strLastChar(c)
	if lengthOf(c) < 1
		throw(STRING_LESS)
	end
	return c[lengthOf(c) - 1]

block toLowerCase(content)	
	if isStrEmpty(content)
		throw(STRING_EMPTY)
	end
	return __lower(content)

block toUpperCase(content)	
	if isStrEmpty(content)
		throw(STRING_EMPTY)
	end
	return __upper(content)

block toSentenceCase(content)	
	if isStrEmpty(content)
		throw(STRING_EMPTY)
	end
	content = toLowerCase(content)
	content[0] = toUpperCase(content[0])
	return content

block strLenght(content)
	return lengthOf(content)
	
block isStrEmpty(content)
	if content == ""
		return true
	end
	return false
	
block getCharAt(content, index)
	return content[index]
	
block strEquals(acom, bcom, con)
	if !con  acom = toLowerCase(acom) bcom = toLowerCase(bcom) end
	if __strcmp(acom, bcom) == 0
		return true
	else
		return false
	end
	
block strStartsWith(m, s)
	if m == null or s == null return false end 
	if lengthOf(s) > lengthOf(m)
		return false #throw(STRING_COMPARE_ERROR)
	end
	sLen = lengthOf(s) - 1
	for a = 0 to sLen
		try 
			if strEquals(m[a], s[a], true) == false
				return false
			end
		catch 
			return false
		end
		
	end
	return true
	
block lastStrAfterChar(str, lst)
	count = 0 ret = ""
	strLength = lengthOf(str) - 1
	for x = strLength to 0 step -1
		if str[x] == lst
			break
		end 
		count++
	end
	lastc = (strLength - count) + 1
	for stra  = lastc to strLength
		ret += str[stra]
	end
	return ret
	
block strAfterLast(str, lst)
	count = 0 ret = ""
	for x = lengthOf(str) - 1 to 0 step -1
		if str[x] == lst
			break
		end 
		count++
	end
	lastc = (lengthOf(str) - count) + 1
	for a  = lastc to lengthOf(str) - 1
		ret += str[a]
	end
	return ret
	
block strAfter(str, lst)
	lstl = (__substr(str, lst)) + lengthOf(lst) + 1
	ret = ""
	for a = lstl to lengthOf(str) - 1
		ret += str[a]
	end
	return ret
	
block splitStr(content, delimiter) return strSplit(content, delimiter)
	
block strSplit(content, delimiter)
	doubleSpace = "  "
	singleSpace = " "
	
	if delimiter == singleSpace or delimiter == doubleSpace
		delimiter = singleSpace
	end
	if delimiter = singleSpace
		#replace tab with space 
		do {
			content = replaceStr(content,tab,singleSpace)
		} while strContains(content,tab)
		#replace double space with space 
		do {
			content = replaceStr(content,doubleSpace,singleSpace)
		} while strContains(content,doubleSpace)
	end
	content = trimStr(content)
	# Need to write a StringToList function as this gives an erroneous response.
	return __string_to_list(__substr(content, delimiter, crlf))

	

class String : Object

	objectName = "String"
	str = ""
	
	block String(instr)
		str = instr
 
	block toString()
		return str
		
	block toList()
		lister = []
		for a in str+1
			add(lister, a)
		end
		return lister
		
	block toLower()
		return toLowerCase(str)
		
	block toUpper()
		return toUpperCase(str)
		
	block toSentence()
		return toSentenceCase(str)
		
	block length()
		return strLenght(str)
		
	block isEmpty()
		return isStrEmpty(str)
		
	block charAt(index)
		return getCharAt(str, index)
	
	block equals(compare)
		return strEquals(str, compare, true)
		
	block compareTo(compare)
		return strEquals(str, compare, false)
		
	block startsWith(s)
		return strStartsWith(str, s)
		
	block firstChar()
		return strFirstChar(str)
		
	block lastChar()
		return strLastChar(str)
		
	block isNull()
		return isStringNull(str)
		
	block getHashCode()
		return hash32(str)
		
	block left(index)
		return strLeft(str, index)
		
	block right(index)
		return strRight(str, index)
		
	block trim()
		return trimStr(str)
		
	block copy(count)
		return strCopy(str, count)
		
	block endsWith(s)
		return strEndsWith(str, s)
		
	block lineCount()
		return strGetLineCount(str)
		
	block subStr(index)
		return strSub(str, index,0)
		
	block subStrAt(index,offset)
		return strSubStr(str, index,offset)
		
	block replace(o, n)
		return replaceStr(str, o, n)
		
	block remove(o)
		return removeStr(str, o)
		
	block removeAt(o)
		removeStrAt(str, o)
		
	block getTypeCode()
		return STRING_TYPE
		
	block concat(v)
		return strConcat(str, v)
		
	block lastAfterChar(lst)
		return lastStrAfterChar(str, lst)
	
	block indexOf(n)
		return str[n]

end 
	


/*
	concat - need expansitivity
	lastStringAfter(s,l) return the last str after specified str

*/