
from simple.core.loadcoredymodule

module simple.core

/*

*/
block ObjEquals(obj1:duck, obj2:duck)
	if IsList(obj1) {
		if !IsList(obj2) { return false }
		return ListEquals(obj1, obj2)
	elif IsObject(obj1)
		if !IsObject(obj2) { return false }
		if __instance_of(obj1,"Object") {
			return obj1.Equals(obj2)
		else
			return false
		}
	}
	return obj1 == obj2

/*
	
		
	:copyright: 2018-2019, Azeez Adewale
	:license: MIT License Copyright (c) 2018 simple
	:author: Azeez Adewale <azeezadewale98@gmail.com>
	:date: 5 Febuary 2017
	:time: 02:24 PM
	:filename: Object.sim
*/
class Object 

	/*
	
	*/
	block Init() end
	
	/*

	*/
	block Name()
		if Name == ""
			Name = __class_name(self)
		end
		return Name

	/*

	*/
	block Module()
		if Module == ""
			Module = __class_module_name(self)
		end
		return Module

	/*

	*/
	block AbsoluteName()
		if Module() == ""
			return Name
		end
		return Module + "." + Name

	/*

	*/
	block ToString()
		return "[" + AbsoluteName() + ":" + Hashcode() + "]"
		
	/*

	*/
	block Hashcode()
		if hashcode == 0
			hashcode = __object_address(self)
		end
		return hashcode

	/*

	*/
	block Equals(obj:duck)
		return obj is Object

	/*

	*/
	block Operator(op:string, obj:duck)
		switch op
			case "=="
				return Equals(value)
			case "!="
				return !Equals(value)
			case "getType"
				return Absolutename()
			default 
				Throw(self,"This Object does not define a behaviour for the operator : " + op)
		end
		return self
		

	/*

	*/
	private 

		/*

		*/
		var hashcode = 0

		/*

		*/
		var Name = ""

		/*

		*/
		var Module = ""
		
end
