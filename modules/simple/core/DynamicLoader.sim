/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - loadcblocks.sim
 * #author - Azeez Adewale
 * #date - 7 Febuary 2017
 */

/*

*/
call "__first_calls.sim"
 
/*
	
*/
module simple.core

__mainDynaicModulesCount = 0

__mainDynamicModules = [	
		["libsystemic.dll", "libstring_savant.dll"],		#Windows
		["libsystemic.so", "libstring_savant.so"],		#Linux
		["libsystemic.dylib", "libstring_savant.dylib"] 	#MAC
	]

try {
	if isAndroid() end
catch
	loadMainDynamicModules()
}

call simple.core.String
 
	dynamicModules = []
	
block callModule(path) 
	if isAndroid() and (__left(path,10) == "libfulltick" or __left(path,7) == "fulltick") {
		#no need to call libfulltick.so on android it built into it
		return 
	}
	path = formatPathName(path)
	#__add_to_list(dynamicModules, path)
	callDynamicModule(path)
	
block formatPathName(path)
	if isWindows() 
		if strEndsWith(path, ".so") 
			path = replaceStr(path, ".so", ".dll")
		elif strEndsWith(path, ".dylib")
			path = replaceStr(path, ".dylib", ".dll")
		end
	elif isLinux()
		if strEndsWith(path, ".dll") 
			path = replaceString(path, ".dll", ".so")
		elif strEndsWith(path, ".dylib")
			path = replaceStr(path, ".dylib", ".so")
		end
	elif isMacosx()
		if strEndsWith(path, ".dll") 
			path = replaceStr(path, ".dll", ".dylib")
		elif strEndsWith(path, ".so")
			path = replaceStr(path, ".so", ".dylib")
		end
	else
		if strEndsWith(path, ".dll") 
			path = replaceStr(path, ".dll", ".so")
		elif strEndsWith(path, ".dylib")
			path = replaceStr(path, ".dylib", ".so")
		end
	end
	if not strEndsWith(path, ".dll") && isWindows() path+=".dll" 
	elif not strEndsWith(path, ".so") && isLinux() path+=".so" 
	elif not strEndsWith(path, ".dylib") && isMacosx() path+=".dylib" 
	end
	return path
 
block getDynamicModules()
	return dynamicModules
	
	
block loadMainDynamicModules()
	try {
		for dyModule in __mainDynamicModules[__mainDynamicModulesCount] {
			callDynamicModule(dyModule)
		}
	catch
		if __mainDynamicModulesCount == (lengthOf(__mainDynamicModules) - 1) {
			@"Ensure your build the systemic and string_savant dynamic modules"
			@"Cannot determine your OS systemic and string_savant dynamic modules"
			@"Please raise an issue at <https://github.com/simple-lang/simple/issues/new> With detail of your OS "
			__exit__
		}
		__mainDynamicModulesCount++
		loadMainDynamicModules()
	}