module simple.internet.curl call "simple/internet/loadinternetdll.sim" ?simple.internet class CurlCore CURLPOINTER =null  CURL_OUTPUT =null  CURL_HEADER =null  CURL_URL =""  CURL_STRING_OUTPUT =null  block CurlCore(url) initCurl(url) block initCurl(url) CURLPOINTER =__curl_easy_init() CURL_URL =url addOption(10002,CURL_URL) CURL_HEADER =__curl_list_append(null,'Accept-Charset: utf-8') block setCurlPointer(pointer) CURLPOINTER =pointer block addOption(option,value) add__option(option,value,"") block getCurlPointer() return CURLPOINTER block flush() __curl_easy_cleanup(CURLPOINTER) block done() __curl_easy_cleanup(CURLPOINTER) block safeFlush() try  for a =0 to lengthOf(CURL_CHILDREN) CURL_CHILDREN[a].flush() end __free_curl_list(CURL_HEADER) catch end block addUrl(url) CURL_URL =url addOption(10002,CURL_URL,"") block getUrl() return  block perform() CURL_OUTPUT =__curl_easy_perform(CURLPOINTER) return CURL_OUTPUT block stringPerform() CURL_STRING_OUTPUT =__curl_easy_string_perform(CURLPOINTER) return CURL_STRING_OUTPUT block getOutput() if CURL_OUTPUT ==null return perform() else return CURL_OUTPUT end block getStringOutput() if CURL_STRING_OUTPUT ==null return stringPerform() else return CURL_STRING_OUTPUT end block $$$__add__option(option,value,param) add__option(option,value,param) private  block add__option(option,value,param) __curl_easy_setopt(CURLPOINTER,option,value,param)