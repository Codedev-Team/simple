module simple.io call "loadfilesavantlib.sim" call "simple/core/String.sim" call "simple/system/System.sim" call "PathAttributes.sim" call "PathType.sim" call "File.sim" call "Directory.sim" block isPath(ipath) try  p =ipath.path() return true catch  return false end block isDirectory(directoryPath) if __dir_exists(directoryPath)==1 { return true} return false block __curePathSlashes(path) if isPath(path){ ret =path.toString() elif isString(path) tempPath =new Path(path) ret =tempPath.toString()} return ret  class Path __IO_PATH =null __IO_MODULE ="simple.io.Path" __IO_PATH_EMPTY ="The __IO_PATH variable is empty" __IO_PATH_NOT_STRING ="Only string is allowed as parameter" __IO_PATH_EXISTS_DELETE ="exist and is been deleted" __IO_PATH_SYSTEM_SLASH =getSystemSlash() block Path(ipath) __IO_PATH =ipath block toString() return __IO_PATH block path()"[just for checking]" block isADirectory() if (rawExists()==1) return true end return false block isAFile() if (rawExists()==0) return true end return false block exists() if (isAFile()||isADirectory()) return true end return false block rawExists() while (stringEndsWith(__IO_PATH,'/')||stringEndsWith(__IO_PATH,'\')) __IO_PATH =removeStringAt(__IO_PATH,lengthOf(__IO_PATH))end return __dir_exists(__IO_PATH) block curePathSlashes(path) if isPath(path){ret =path.toString()} ret =replaceString(path,'//','/') ret =replaceString(ret,'\\','/') ret =replaceString(ret,'/',__IO_PATH_SYSTEM_SLASH) return ret  block __renameTo(oldName,newName) return __rename(oldName,newName) block _renameTo(oldName,newName) newName =curePathSlashes(newName) if !isString(newName){ throwWithTitle(__IO_MODULE,__IO_PATH_NOT_STRING)} return __renameTo(oldName,newName) block delete() return __delete(__IO_PATH) block _delete(filePath) return __delete(filePath) block absolutePath() if __IO_PATH ==null { throwWithTitle(__IO_MODULE,__IO_PATH_EMPTY)} tempPath =__IO_PATH if stringStartsWith(__IO_PATH,".")||stringStartsWith(__IO_PATH,"..")||stringStartsWith(__IO_PATH,__IO_PATH_SYSTEM_SLASH){ tempPath =getCorrectPath(__IO_PATH)} return tempPath block getSystemSlash() if isWindows(){ return '\' elif isLinux() return '/'} return '/' block _moveTo(newFolder,moveType) __newFolder =newFolder if isPath(newFolder){ __newFolder =newFolder.toString() else  try { newFolder.isADirectory() __newFolder =__newFolder.getPath() catch }} if !stringEndsWith(__newFolder,__IO_PATH_SYSTEM_SLASH){ __newFolder +=__IO_PATH_SYSTEM_SLASH} if moveType { return forceRenameTo(__newFolder+__IO_PATH_SYSTEM_SLASH+getName()) else return renameTo(__newFolder+__IO_PATH_SYSTEM_SLASH+getName())} block name() abPath =absolutePath() while (stringEndsWith(abPath,__IO_PATH_SYSTEM_SLASH)){ abPath =removeStringAt(abPath,lengthOf(abPath))} dName =lastStringAfterChar(abPath,__IO_PATH_SYSTEM_SLASH) return dName block parentPath() abPath =absolutePath() tempPath =removeString(abPath,__IO_PATH_SYSTEM_SLASH+name()) return new Path(tempPath) block toDirectory() test =new Directory(__IO_PATH) return test block toFile() return new File(__IO_PATH) block toPathAttributes() return new PathAttributes(__IO_PATH) block size() return toPathAttributes().size() block nodeNumber() return toPathAttributes().nodeNumber() block hardLinkCount() return toPathAttributes().hardLinkCount() block GID() return toPathAttributes().GID() block UID() return toPathAttributes().UID() block lastAccessDate() return toPathAttributes().lastAccessDate() block lastDateModified() return toPathAttributes().lastDateModified() block lastDateChanged() return toPathAttributes().lastDateChanged() block dateCreated() return toPathAttributes().dateCreated() block blockSize() return toPathAttributes().blockSize() block blockAllocated() return toPathAttributes().blockAllocated() block type() return toPathType().getTypeValue() block toPathType() return new PathType(__IO_PATH) private  block getCorrectPath(oddPath) correctPath =__path_absolute_path(oddPath) if !stringEndsWith(correctPath,oddPath)&&!stringContains(oddPath,"."+__IO_PATH_SYSTEM_SLASH){ correctPathTemp =removeString(oddPath,correctPath) correctPath +=correctPathTemp} return correctPath