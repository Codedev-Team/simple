/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Directory.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */
 
module simple.io

call "Path.sim"

block mkdir(path)
	__mkdir(path)

class Directory : Path

	__IO_PACKAGE = "simple.io.Directory"
	__IO_DIRECTORY_ONLY_STRING_ALLOWED = "Only string should be sent as parameter "
	__IO_DIRECTORY_EXISTS = "The directory already exists you should remove the directory first"

	block Directory(path)
		if isPath(path)
			__IO_DIRECTORY_PATH = path.toString()
		else 
			__IO_DIRECTORY_PATH = path
			rawDirectoryPath = path
		end
		__IO_DIRECTORY_PATH = curePathSlashes(__IO_DIRECTORY_PATH)
		directoryName = formatDirectoryName(__IO_DIRECTORY_PATH)
		
	block create()
		ensureParent()
		display mkdir(__IO_DIRECTORY_PATH)
		
	block explode()
		return blow_dir(__IO_DIRECTORY_PATH)
		
	block listFiles()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if !eDir[a][2]
				nFile = new File(__IO_DIRECTORY_PATH+"/"+eDir[a][1])
				add(filesList, nFile)
			end
		end
		return filesList
		
	block listDirectories()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if eDir[a][2]
				nDir = new Directory(__IO_DIRECTORY_PATH+"/"+eDir[a][1])
				add(folderList, nDir)
			end
		end
		return folderList
		
	block isADirectory()
		if (rawExists() == 1)
			return true
		end
		return false
		
	block isAFile()
		if (rawExists() == 0)
			return true
		end
		return false
		
	block exists()
		if (rawExists() == 1) 
			return true
		end
		return false
		
	#This block confirms if the path is a directory it return 
	#@DataType TRUE	(1) if it is a directory and return @DataType FALSE (0)
	#if it is not a directory on other cases of other return number 
	#-1 means it does not exist at all
	#-2 means the error is unknown (uncommon) 	
	#In this block trailing '/' or '\' are completely striped off (untreated)
	block rawExists()
		while (stringEndsWith(__IO_DIRECTORY_PATH,'/') || stringEndsWith(__IO_DIRECTORY_PATH,'\')) 
				__IO_DIRECTORY_PATH = removeStringAt(__IO_DIRECTORY_PATH, lengthOf(__IO_DIRECTORY_PATH)) end
		return __dir_exists(__IO_DIRECTORY_PATH)
		
	block toPath()
		return new Path(__IO_DIRECTORY_PATH)
		
	block getPath()
		return __IO_DIRECTORY_PATH
		
	block toString()
		return rawDirectoryPath
		
	block parent()
		tRemove = lastStringAfterChar(__IO_DIRECTORY_PATH, "/")
		return new Directory(removeString(__IO_DIRECTORY_PATH, "/"+tRemove))
		
	block addChild(dir)
		add(childrenToCreate, dir) 
		
	block getPendinChildern()
		return childrenToCreate
		
	block getName()
		return directoryName
		
	block formatDirectoryName(dir)
		while (stringEndsWith(dir,getSystemSlash()) )
			dir = removeStringAt(dir, lengthOf(dir)) end
		dName = lastStringAfterChar(dir, getSystemSlash())
		return dName 
		
	/*
		Rename a @Directory to another a rather fast way of moving directory
		about in the same disk partition. This take the new absolute directory 
		to be rename to which must be a string. 
		@See @Class Path @Block __renameTo(oldname,newname)
		@Return the rename operation @DataType Number
	*/
	block renameTo(newName) 
		if !isString(newName) {
			throwWithTitle(__IO_PACKAGE,__IO_DIRECTORY_ONLY_STRING_ALLOWED)
		}
		tempDir = new Directory(newName)
		if tempDir.exists() {
			throwWithTitle(__IO_PACKAGE,newName+" "+__IO_DIRECTORY_EXISTS)
		}
		return __renameTo(__IO_DIRECTORY_PATH,newName)
		
	/*
		
	*/
	block moveTo(newFolder)
		__newFolder = curePathSlashes(newFolder)
		if isPath(newFolder) {
			__newFolder = newFolder.toString()
		else 
			try {
				isADirectory(newFolder)
				__newFolder = __newFolder.getPath()
			catch 
			
			}
		}
		if !stringEndsWith(__newFolder,getSystemSlash()) {
			__newFolder += getSystemSlash()
		}
		return renameTo(__newFolder+getSystemSlash()+getName())
		
	
	private
		__IO_DIRECTORY_PATH = ""
		rawDirectoryPath = ""
		directoryName = ""
		filesList = []
		folderList = []
		childrenToCreate = []
		
		block ensureParent() 
			dir = removeString(__IO_DIRECTORY_PATH,lastStringAfterChar(__IO_DIRECTORY_PATH, '/'))
			pd = new Directory(dir) pd.addChild(__IO_DIRECTORY_PATH)
			if (!pd.exists()) pd.create() else mkdir(pd.getPendinChildern()[0]) end
		
		
		