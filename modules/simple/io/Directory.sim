/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Directory.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */
 
module simple.io

call "Path.sim"

block mkdir(path)
	__mkdir(path)

class Directory : Path

	__IO_PACKAGE = "simple.io.Directory"
	__IO_DIRECTORY_EXISTS = "The directory already exists you should remove the directory first"
	__IO_DIRECTORY_EXISTS_DELETE = "exist and is been deleted"
	__IO_DIRECTORY_DELETE = "The directory cannot be deleted"
	__IO_DIRECTORY_PATH = ""

	block Directory(path)
		if isPath(path)
			__IO_DIRECTORY_PATH = path.toString()
		else 
			__IO_DIRECTORY_PATH = path
			rawDirectoryPath = path
		end
		__IO_DIRECTORY_PATH = curePathSlashes(__IO_DIRECTORY_PATH)
		directoryName = formatDirectoryName(__IO_DIRECTORY_PATH)
		__IO_PATH = __IO_DIRECTORY_PATH
		
	block create()
		ensureParent()
		display mkdir(__IO_DIRECTORY_PATH)
		
	block explode()
		return blow_dir(__IO_DIRECTORY_PATH)
		
	block listFiles()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if !eDir[a][2]
				nFile = new File(__IO_DIRECTORY_PATH+"/"+eDir[a][1])
				add(filesList, nFile)
			end
		end
		return filesList
		
	block listDirectories()
		eDir = explode()
		for a = 0 to lengthOf(eDir)
			if eDir[a][2]
				nDir = new Directory(__IO_DIRECTORY_PATH+"/"+eDir[a][1])
				add(folderList, nDir)
			end
		end
		return folderList
		
	block toPath()
		return new Path(__IO_DIRECTORY_PATH)
		
	block getPath()
		return __IO_DIRECTORY_PATH
		
	block toString()
		return rawDirectoryPath
		
	block parent()
		tRemove = lastStringAfterChar(__IO_DIRECTORY_PATH, "/")
		return new Directory(removeString(__IO_DIRECTORY_PATH, "/"+tRemove))
		
	block addChild(dir)
		add(childrenToCreate, dir) 
		
	block getPendingChildern()
		return childrenToCreate
		
	block getName()
		return directoryName
		
	block delete()
		if exists() {
			contentStack = explode()
			contentStackLength = lengthOf(contentStack)
			for a = 0 to contentStackLength {
				@contentStack[a]
			}
		}
		
	/*

	*/
	block formatDirectoryName(dir)
		while (stringEndsWith(dir,getSystemSlash()) ) {
			dir = removeStringAt(dir, lengthOf(dir)) 
		}
		dName = lastStringAfterChar(dir, getSystemSlash())
		return dName 
		
	/*
		Confirm if the directory already exist return true if it exists and 
		false if it does not exists
		@Return if the directory exists @DataType Boolean
	*/
	block exists() 
		tempPath = new Path(__IO_DIRECTORY_PATH)
		return tempPath.isADirectory()
		
	/*
		Change the name of a directory to another. Only string is allowed as 
		parameter and the new folder name must not exists else an error is thrown,
		to forcefully rename a folder @Block forceRenameTo(newName) should be called
		@Return the rename operation value @DataType Number
	*/
	block renameTo(newName)
		tempPath = new Path(newName)
		if tempPath.exists() {
			throwWithTitle(__IO_PACKAGE,tempPath.toString()+" - "+__IO_DIRECTORY_EXISTS)
		}
		return _renameTo(__IO_DIRECTORY_PATH,newName)
		
	/*
		Rename the directory to the new name even if it exist, instead of throwing an
		error if the folder exists the folder will be deleted instead then the current 
		directory is renamed to the deleted folder, the content of the old folders are 
		lost in this case
		@Return the rename operation value @DataType Number
	*/
	block forceRenameTo(newName)
		tempDir = new Directory(newName)
		if tempDir.exists() {
			warn(__IO_PACKAGE+" : "+tempDir.getPath()+" - "+__IO_DIRECTORY_EXISTS_DELETE)
			if tempDir.delete() != true {
				throwWithTitle(__IO_PACKAGE,tempDir.getPath()+" - "+__IO_DIRECTORY_DELETE)
			}
		}
		return -20 #_renameTo(__IO_DIRECTORY_PATH,newName)
		
	/*
		Move a directory from one folder to another. This operation will require the 
		folder to be moved to exist else an error is thrown. It function is similar 
		to @Block renameTo(newName)
		@Return the move operation success value @DataType Number 
	*/
	block _moveTo(newFolder)
		__newFolder = newFolder
		if isPath(newFolder) {
			__newFolder = newFolder.toString()
		else 
			try {
				newFolder.isADirectory()
				__newFolder = __newFolder.getPath()
			catch 
			
			}
		}
		if !stringEndsWith(__newFolder,getSystemSlash()) {
			__newFolder += getSystemSlash()
		}
		return renameTo(__newFolder+getSystemSlash()+getName())
		
	
	private
		rawDirectoryPath = ""
		directoryName = ""
		filesList = []
		folderList = []
		childrenToCreate = []
		
		block ensureParent() 
			dir = removeString(__IO_DIRECTORY_PATH,lastStringAfterChar(__IO_DIRECTORY_PATH, '/'))
			pd = new Directory(dir) pd.addChild(__IO_DIRECTORY_PATH)
			if (!pd.exists()) pd.create() else mkdir(pd.getPendingChildern()[0]) end
		
		
		