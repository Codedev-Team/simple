
/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang

*/

/* 
	#filename - Console.sim
	#date - 5 Febuary 2017
	#time - 09 : 29 PM
	#license - MIT License Copyright (c) 2018 simple-lang
	#author - Azeez Adewale	<azeezadewale98@gmail.com> 
 */

call simple.utilities.ConsoleColor
call simple.core.List
call simple.utilities.Type
call simple.io.PrintWriter
call simple.io.FileWriter
import simple.core

/*

*/
module simple.utilities

/*
	initialized to allow ussage as ConsoleColor.Color
*/
#enum
final ConsoleColor = new ConsoleColor


/*@Prefix
	call the @File ConsoleColor.sim which hold all the type of color for the foreground and background
	of the console. The dynamic module @DynamicModule Consoler is also called in the file.
	call the @Class List for the list class
*/

/*
	The standard output stream is the default destination of output for console programs. It is usually directed 
	by default to the text console (generally, on the screen) which can be the terminal. 
	<br />
	Although it is commonly  assumed that the default destination for stdout is going to be the screen, this may 
	not be the case even in regular console systems, since stdout can generally be redirected on most operating 
	systems at the time of invoking the application. For example, many systems, among them DOS/Windows and most 
	UNIX shells, support the following command syntax :
	
	```simple
	theprogram > output.txt
	```
	
	to redirect the output of **theprogram** to the file **output.txt** instead of the console.
	<br />
	It basically the normal C stdout which give output to the screen, but can be used to pipe output to another process 
	or file.
*/
final stdout = new PrintWriter(new FileWriter(__stdout()), true){
	Closable = false
}

/*
	The standard error stream is the default destination for error messages and other diagnostic warnings. Like 
	@Variable __stdout, it is usually also directed by default to the text console (generally, on the screen).
	
	<br />
	Although in many cases both @Variable __stdout and stderr are associated with the same output device (like the console), 
	applications may differentiate between what is sent to @Variable __stdout and what to stderr for the case that one of them 
	is redirected. For example, it is frequent to redirect the regular output of a console program (@Variable __stdout) to a 
	file while expecting the error messages to keep appearing in the console.
	<br />
	It is also possible to redirect stderr to some other destination from within a program using the freopen function.
	<br />
	It basically the normal C stderr which give error and diagnostic output to the screen, but can be used to pipe 
	output to another process or file.
*/
final stderr = new PrintWriter(new FileWriter(__stderr()), true) {
	Closable = false
}

/*
	The standard input stream is the default source of data for applications. It is usually directed by default to the 
	keyboard.
	<br />
	it is commonly assumed that the source of data for stdin is going to be a keyboard, this may not be the case even 
	in regular console systems, since stdin can generally be redirected on most operating systems at the time of 
	invoking the application. For example, many systems, among them DOS/Windows and most UNIX shells, support the 
	following command syntax :
	
	```simple
	theprogram < output.txt
	```
	
	to use the content of the file **output.txt** as the primary source of data for **theprogram** instead of the console 
	keyboard.
	<br />
	It basically the normal C stdin, which accept input from keyboard but maybe used to pipe input from another process of 
	file.
*/
final __stdin = __stdin()
	

/*

*/
block clearConsole()
	if isWindows() {
		system("cls")
	else
		system("clear")
	}

