
/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang

*/

/* 
	#filename - Console.sim
	#date - 5 Febuary 2017
	#time - 09 : 29 PM
	#license - MIT License Copyright (c) 2018 simple-lang
	#author - Azeez Adewale	<azeezadewale98@gmail.com> 
 */

call simple.utilities.ConsoleColor
call simple.core.List
call simple.utilities.Type

/*
	initialized to allow ussage as ConsoleColor.block()
*/
ConsoleColor = new ConsoleColor


/*@Prefix
	call the @File ConsoleColor.sim which hold all the type of color for the foreground and background
	of the console. The dynamic module @DynamicModule Consoler is also called in the file.
	call the @Class List for the list class
*/

/*
	The standard output stream is the default destination of output for console programs. It is usually directed 
	by default to the text console (generally, on the screen) which can be the terminal. 
	<br />
	Although it is commonly  assumed that the default destination for stdout is going to be the screen, this may 
	not be the case even in regular console systems, since stdout can generally be redirected on most operating 
	systems at the time of invoking the application. For example, many systems, among them DOS/Windows and most 
	UNIX shells, support the following command syntax :
	
	```simple
	theprogram > output.txt
	```
	
	to redirect the output of **theprogram** to the file **output.txt** instead of the console.
	<br />
	It basically the normal C stdout which give output to the screen, but can be used to pipe output to another process 
	or file.
*/
final __stdout = __init_stdout()

/*
	The standard error stream is the default destination for error messages and other diagnostic warnings. Like 
	@Variable __stdout, it is usually also directed by default to the text console (generally, on the screen).
	
	<br />
	Although in many cases both @Variable __stdout and stderr are associated with the same output device (like the console), 
	applications may differentiate between what is sent to @Variable __stdout and what to stderr for the case that one of them 
	is redirected. For example, it is frequent to redirect the regular output of a console program (@Variable __stdout) to a 
	file while expecting the error messages to keep appearing in the console.
	<br />
	It is also possible to redirect stderr to some other destination from within a program using the freopen function.
	<br />
	It basically the normal C stderr which give error and diagnostic output to the screen, but can be used to pipe 
	output to another process or file.
*/
final __stderr = __init_stderr()

/*
	The standard input stream is the default source of data for applications. It is usually directed by default to the 
	keyboard.
	<br />
	it is commonly assumed that the source of data for stdin is going to be a keyboard, this may not be the case even 
	in regular console systems, since stdin can generally be redirected on most operating systems at the time of 
	invoking the application. For example, many systems, among them DOS/Windows and most UNIX shells, support the 
	following command syntax :
	
	```simple
	theprogram < output.txt
	```
	
	to use the content of the file **output.txt** as the primary source of data for **theprogram** instead of the console 
	keyboard.
	<br />
	It basically the normal C stdin, which accept input from keyboard but maybe used to pipe input from another process of 
	file.
*/
final __stdin = __init_stdin()


/*
	Create an instance of the @Class stdout for printing and outputing to the standard output
*/
final stdout = new StdOut(__stdout)

/*
	Create an instance of the @Class stderr for printing and outputing to the standard error and diagnostic output
*/
final stderr = new StdErr(__stderr)


/*
	The forgreound/text color of text of the standard output
*/
__stdForegroundColor = ConsoleColor.NONE

/*
	The background color of text of the standard output
*/
__stdBackgroundColor = ConsoleColor.NONE

/*
	A line that fill the width of an average console windows, simply an '=' character 151 long
*/
consoleLine = __copy("=",151)+nl

/*
	The console module in a printable string **simple.utilities.Console**
*/
__CONSOLE_MODULE = "simple.utilities.Console"

/*
	Exception message to indicate that the parameter can only be a list of an instance of the @Class List class
*/
__CONSOLE_LIST_ONLY = "Argument can only be a list or an instance of the class List"

/*
	Exception message to accept boolean value only as the argument
*/
__ARGUMENT_BOOLEAN_ONLY = "The argument has to be a boolean value only"

#TODO :  Check the std_output parameter are of std_output class using reflective
/*
	Print 
*/
block print(std_output, val)
	std_output.print(val)

block println(std_output, val)
	std_output.println(val)
	
block printfc(std_output,color,val)
	std_output.printfc(color,val)
	
block printinLine(std_output,content)
	std_output.print("\r"+content)
	
block printLine(std_output,fg,bg)
	std_output.printLine(fg,bg)
	
/*
	Flushes the output stream. A delegate block to the std_output parameter @Class|Block __Std_Console|flush
*/
block flush(std_output)
	std_output.flush()
	
	
/*
	Format the literal value to be printed in the output into the standard C Format with escape sequences. simple-lang
	does not support escape sequences by default but rather depends on declared variables such as 
	
	```simple
	nl - Newline
	cr - Carriage Return
	lf - Line Feed
	tab - Tab
	```
	
	<br />
	This predefined variables in the VM are not final and can be changed in the program to another value thus it not very 
	safe for standard use. using this block to format the literal will make it safe and will support the standard ANSI C 
	literal format. The supported literal sequences are listed below.
	
	```simple
	\a or \007	-	07	-	Alert
	\b	-	08	-	Backspace
	\f	-	12	-	Formfeed
	\n	-	10	-	Newline
	\r	-	13	-	Carriage Return
	\t	-	09	-	Horizontal Tab
	\v	-	11	-	Vertical Tab
	\\	-	92	-	Carriage Backslash
	\'	-	27	-	Single Quotation Mark
	\"	-	22	-	Double Quotation Mark
	\?	-	63	-	Question Mark (used to avoid @Link trigraph)
	\e	-	27	-	Escape Character
	```
	
	@Return the formated literal @DataType String
	
*/
block formatEscapeSequence(val)
	val = replaceStr(val, "\a", char(07))
	val = replaceStr(val, "\007", char(07))
	val = replaceStr(val, "\b", char(08))
	val = replaceStr(val, "\f", char(12))
	val = replaceStr(val, "\n", char(10))
	val = replaceStr(val, "\r", char(13))
	val = replaceStr(val, "\t", char(09))
	val = replaceStr(val, "\v", char(11))
	val = replaceStr(val, "\\", char(92))
	val = replaceStr(val, "\'", char(27))
	val = replaceStr(val, '\"', char(22))
	val = replaceStr(val, '\?', char(63))
	val = replaceStr(val, '\e', char(27))
	return val
	
block _vformatf(arg)
	value = arg[0]
	finalValue = ""
	valueLen = lengthOf(value) - 1
	for a = 0 to valueLen  {
		switch value[a] {
			case "{"
				if value[a] == '{' and isDigit(value[a+1]){
					t_v = 0 + value[a++] + 1 #TODO : use real conversion and not operator
					if t_v != 0 {
						v = arg[t_v * 1] 
					else
						v = "null"
					}
					finalValue += v 
					if value[a+1] == '}' { a++ }
				else 
					finalValue += value[a] 
					continue
				}
			default 
				finalValue += value[a]
		}
		
	}
	return formatEscapeSequence(finalValue)

class StdOut : __Std_Console

	block StdOut(std_output)
		this.std_output = std_output
		
	block setStdOut(std_output)
		if (this.std_output == __stdout) {
			__throwWithTitle("","")
		}
		this.std_output = std_output
		
	block getStdOut()
		return std_output

class StdErr : __Std_Console

	block StdErr(std_output)
		this.std_output = std_output
		
	block setStdErr(std_output)
		this.std_output = std_output
		if (this.std_output == __stderr) {
			__throwWithTitle("","")
		}
		
	block getStdErr()
		return std_output

private 

	class __Std_Console
	
		std_output = __stdout
		ConsoleColor = new ConsoleColor
		__stdForegroundColor = ConsoleColor.NONE
		__stdBackgroundColor = ConsoleColor.NONE
		
		block println(param...)
			value = "" 
			parseObject = false
			paramLen = lengthOf(param)
			if paramLen > 2 {
				throwWithTitle(__CONSOLE_MODULE,"Calling block with extra parameters!") 
			}
			if paramLen > 0 {
				value = param[0]
			else 
				value = " "
			} 
			if paramLen > 1 {
				parseObject = param[1]
				if parseObject != true and parseObject != false {
					throwWithTitle(__CONSOLE_MODULE,__SECOND_ARGUMENT_BOOLEAN_ONLY)
				}
			}
			_value = getObjectString(value,parseObject) 
			__print(std_output,_value+nl)
			
		block print(param...)
			value = ""
			parseObject = false
			paramLen = lengthOf(param)
			if paramLen > 2 {
				throwWithTitle(__CONSOLE_MODULE,"Calling block with extra parameters!") 
			}
			if paramLen > 0 {
				value = param[0]
			else 
				value = " "
			}
			if paramLen > 1 {
				parseObject = param[1]
				if parseObject != true and parseObject != false {
					throwWithTitle(__CONSOLE_MODULE,__SECOND_ARGUMENT_BOOLEAN_ONLY)
				}
			}
			value = getObjectString(value,parseObject) 
			__print(std_output,value)
			
		block vprintf(arg)
			val = ""
			if isList(arg) {
				val = _vformatf(arg)
			else
				try {
					obj = arg.object() #TODO : a very efficient way to check if class is List using reflective
					if !isString(obj) and isList(obj) {
						val = _vformatf(obj)
					else
						throwWithTitle(__CONSOLE_MODULE,__CONSOLE_LIST_ONLY)
					}
				catch
					throwWithTitle(__CONSOLE_MODULE,__err__)
				}
			}
			__print(std_output,val)
			
		block printfc(color,param...) #allow getting color as instance of ConsoleColor
			value = ""
			parseObject = false
			paramLen = lengthOf(param)
			if paramLen > 2 {
				throwWithTitle(__CONSOLE_MODULE,"Calling block with extra parameters!") 
			}
			if paramLen > 0 {
				value = param[0]
			else 
				value = " "
			}
			if paramLen > 1 {
				parseObject = param[1]
				if parseObject != true and parseObject != false {
					throwWithTitle(__CONSOLE_MODULE,__SECOND_ARGUMENT_BOOLEAN_ONLY)
				}
			}
			value = getObjectString(value,parseObject)
			__printwfb(std_output, color, this.__stdBackgroundColor, value)
			
		block printLine(fg,bg)
			if fg ==  null fb = ConsoleColor.NONE end
			if bg ==  null bb = ConsoleColor.NONE end
			__printwfb(std_output, fg, bg, consoleLine)
	
		block setStd(std_output)
			if (this.std_output == __stdout or this.std_output == __stderr) {
				__throwWithTitle("","")
			}
			this.std_output = std_output
		
		block getStd()
			return std_output
			
		/*
			Flushes the output stream.
		*/
		block flush()
			__flush_console(std_output)
			
		private 
		
			block getObjectString(obj, parseObject) 
				val = ""
				
				if isNull(obj) {
					val = "(null)"
				elif isString(obj) 
					val = formatEscapeSequence(obj)
				elif isNumber(obj)
					val = formatEscapeSequence(""+obj)
				elif isList(obj)
					_val = new List(obj) 
					val = _val.toString() 
				elif isObject(obj) 
					if __object_has_method(obj,"toString") {
						val = obj.toString()
					elif parseObject
						val = parseObjString(obj)
					else
						val = "[cannot print object:" + __class_module_name(obj) + "." + __class_name(obj) + "]"
					}		
				}
				return val
			
			block parseObjString(obj)
				objectValue = [__class_name(obj)]
				objectValue + __object_attributes(obj)
				objectValue + __object_methods(obj)
				objectList = new List(objectValue)
				return objectList.toString()

	
#undone


#Console is initialized as a variable in order to allow usage as Console.block()
Console = new Console

	#a character that move caret to start of line or simply clear line
	$__clearLine = char(13)


/*
	This block is Most useful for exiting the program/application at any level 
	during the development of the GUI(fulltick) library using @Var __exit__ 
	failed to execute in callbacks due to the fact that the callback block
	is executed as a virtual method in the library. This block give no regard
	to the program execution level at all and close the program at once
*/
block console_exit(value)
	__exit(value)
	
block console_sleep(value)
	__sleep(value)

#just making the @Block exit(value) available in the @Class Console 
#to support OOP
block hard_exit(value)
	exit(value)

#prints the string content in one line from start 'use with caution'

	
#read input from the console  with a custom title
block readLine(title)
	print(title) 
	read readContent 
	return readContent

#read input from the console 
block readln()
	read readContent
	return readContent

#set the foregroundColor to using colorPrint and colorPrintln
block setForeground(color)
	foregroundColor = color

#set the backgroungColor to using colorPrint and colorPrintln
block setBackground(color)
	backgroundColor = color
	
#prints the string in respect to the FG and BG colors
block colorPrint(content)
	__printwfb(foregroundColor, backgroundColor, formatLiteral(content))

#prints the string in respect to the FG and BG colors with new line
block colorPrintln(content)
	__printwfb(foregroundColor, backgroundColor, formatLiteral(content)+crlf)


#print with a custom BG and present foregroundColor
block printWithBG(color, content)
	__printwfb(foregroundColor, color, formatLiteral(content))

#print with a custom FG and BG
block printWithFGBG(fcolor, bcolor, content)
	__printwfb(fcolor, bcolor, formatLiteral(content))
	
#reset the console colors which is none by default		
block resetColor()
	foregroundColor = ConsoleColor.NONE
	backgroundColor = ConsoleColor.NONE	

#prints a plain line on the console/terminal	
block printConsoleLine()
	print(consoleLine)
	
#make the computer beep with custom frequency and
#length
block console_beep(f, l)
	__beep(f, l)

#beep just once
block singleBeep()
	beep(1000, 200)


#by default all escape character is not supported 
#this block formatLiteral(content) allows for escape character supports
/*block formatLiteral(content)
	inContent = ""
	if isNumber(content) 
		content = ""+content
	end
	for a = 0 to lengthOf(content) - 1
		switch content[a]
			case '\'
				a++
				switch content[a]
				case '\'
					inContent +=  '\'
				case '"'
					inContent += '"'
				case "n"
					inContent +=  crlf
				case "t"
					inContent +=  char(9)
				case "r" 
					inContent +=  char(13)
				end
			default 
				inContent +=  content[a]
		end
	end
	return inContent */



#the console class for various console blocks and functions
#the @Class Console act mostly as a delegate to the @DyLib Consoler 
#which hold most of the block in this class
class Console 