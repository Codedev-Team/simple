module simple.utilities call "simple/core/loadcoredymodule.sim"  __TYPE_PACKAGE="simple.utilities.Type" __TYPE_UNKNOWN_PARAM ="Unknown Variable passed !" __TYPE_INVALID_PARAM ="Invalid Parameter passed, Expecting String, List or Number" __TYPE_ONLY_STRING="Invalid Parameter passed, only String is accepted" block typeOf(var)    if isList(var){        return "List"    elif isString(var)        return "String"    elif isNumber(var)        return "Number"    else        return __TYPE_UNKNOWN_PARAM    } block __get_var_as_string(var) if isString(var){ return var elif isNumber(var) return ""+var+"" else throwWithTitle(__TYPE_PACKAGE,__TYPE_INVALID_PARAM)} block isAlphaNum(var) tempVar =__get_var_as_string(var) return __isAlphaNum(tempVar) block isAlpha(var) tempVar =__get_var_as_string(var) return __isAlpha(tempVar) block isDigit(var) tempVar =__get_var_as_string(var) return __isNum(tempVar) block isControlChar(var) tempVar =__get_var_as_string(var) return __isControlChar(tempVar) block isGraphical(var) tempVar =__get_var_as_string(var) return __isGraph(tempVar) block isLowerCase(var) if !isString(var){ throwWithTitle(__TYPE_PACKAGE,__TYPE_ONLY_STRING)} return __isLower(var) block isUpperCase(var) if !isString(var){ throwWithTitle(__TYPE_PACKAGE,__TYPE_ONLY_STRING)} return __isUpper(var) block isPrintable(var) tempVar =__get_var_as_string(var) return __isPrint(tempVar) block isWhiteSpace(var) tempVar =__get_var_as_string(var) return __isSpace(tempVar) block __isWhiteSpace(var) tempVar =' '+__get_var_as_string(var) for a in tempVar { if a !=' ' { return false}} return true block isPunctuation(var) tempVar =__get_var_as_string(var) return __isPunct(tempVar) block isHexDigit(var) tempVar =__get_var_as_string(var) return __isXDigit(tempVar)