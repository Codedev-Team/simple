
/*

*/
call simple.core.Object
call simple.system.Color
call fulltick.base.FWidget
call fulltick.drawing.FAlignment
call fulltick.drawing.FFont
call fulltick.drawing.FBoxType
call fulltick.painting.FColor

/*

*/
module fulltick.widgets

/*

*/
class FInput_ : FWidget

    /*

    */
    Width = FApp.Scheme.getShemeValue("FInput_.Width") 

    /*

    */
    Height = FApp.Scheme.getShemeValue("FInput_.Height") 

    /*

    */
    X = FApp.Scheme.getShemeValue("FInput_.X") 

    /*

    */
    Y = FApp.Scheme.getShemeValue("FInput_.Y") 

    /*

    */
    Label = FApp.Scheme.getShemeValue("FInput_.Label") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.getShemeValue("FInput_.CapitalizeLabel") 

    /*

    */
    Background = FApp.Scheme.getShemeValue("FInput_.Background") 

    /*

    */
    LabelAlignment = FApp.Scheme.getShemeValue("FInput_.LabelAlignment") 

    /*

    */
    Box = FApp.Scheme.getShemeValue("FInput_.Box") 

    /*

    */
    Border = FApp.Scheme.getShemeValue("FInput_.Border") 

    /*

    */
    HasBorder = FApp.Scheme.getShemeValue("FInput_.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.getShemeValue("FInput_.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.getShemeValue("FInput_.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.getShemeValue("FInput_.KeyboardFocusable") 

    /*

    */
    Tooltip = FApp.Scheme.getShemeValue("FInput_.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.getShemeValue("FInput_.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.getShemeValue("FInput_.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.getShemeValue("FInput_.LabelSize")

    /*

    */
    LabelType = FApp.Scheme.getShemeValue("FInput_.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.getShemeValue("FInput_.SelectionColor")

    /*

    */
    Text = null

    /*

    */
    Value = FApp.Scheme.getShemeValue("FInput_.Value")

    /*

    */
    CursorColor = FApp.Scheme.getShemeValue("FInput_.CursorColor")

    /*

    */
    block FInput_(params...)
        paramsLen = lengthOf(params)
        if paramsLen == 1 {
            Label = params[0]
            if !isString(Label) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'string' as FInput_ Label")
            }
        elif paramsLen == 2
            X = params[0]
            Y = params[1]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'number' as FInput_ X and Y")
            }
        elif paramsLen == 3 
            X = params[0]
            Y = params[1]
            Label = params[2]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'number' as FInput_ X and Y")
            }
            if !isString(Label) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'string' as FInput_ Label")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'number' as FInput_ X and Y")
            }
            if !isNumber(Width) or !isNumber(Height) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'number' as FInput_ Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Label = params[4]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'number' as FInput_ X and Y")
            }
            if !isNumber(Width) or !isNumber(Height) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'number' as FInput_ Width and Height")
            }
            if !isString(Label) {
                throw(self,FULLTICK_INVALID_PARAMETER + " Expecting 'string' as FInput_ Label")
            }
        else    
            if paramsLen != 0 {
                throw(self,SIMPLE_VM_ERROR_EXTRAPARAMETERSCOUNT)
            }
        } 
        if CapitalizeLabel {
            Label = toUpperCase(Label)
        }
        Ptr = __Fl_Box(X, Y, Width, Height, Label) 
        registerWidget()
        construct()     
		setCursorColor(CursorColor)
        
        return self
		
	/*
	
	*/
	block copy(number clipboard...)
		validatePointer()
		clipboardLen = lengthOf(clipboard)
		clip = 1
		
		if clipboardLen == 0 {
		elif clipboardLen == 1
			clip = clipboard[0]
		else
			throw(self, "Calling block with invalid length of parameters")
		}
		return __Fl_Input__copy_4(Ptr, clip) 
		
	/*
	
	*/
	block copyCuts()
		validatePointer()
		return __Fl_Input__copy_cuts(Ptr) 
		
	/*
	
	*/
	block cut(number plusChars...)
		validatePointer()
		plusCharsLen = lengthOf(plusChars)
		
		copy()
		if plusCharsLen == 0 {
			return __Fl_Input__cut(Ptr)  
		elif plusCharsLen == 1
			return __Fl_Input__cut_1(Ptr, plusChars[0])
		elif plusCharsLen == 2
			warn("The cut text is not copied ")
			return __Fl_Input__cut_2(Ptr, plusChars[0], plusChars[1])
		else
			throw(self, "Calling block with invalid length of parameters")
		}
		
	/*
		
	*/
	block deleteSelected()
		validatePointer()
		return __Fl_Input__cut(Ptr) 

    /*

    */
    block setCursorColor(value)
        validatePointer()
        if isObject(value) {
            if __instance_of(value,"FColor") {
                __Fl_Input__cursor_color_1(Ptr,value.colorAsNumber())
            }
        elif isNumber(value) or isString(value) 
            __Fl_Input__cursor_color_1(Ptr,value)
            value = new FColor(value) 
        else
            throw(self,"invalid parameter. Expecting innstance of 'Fcolor', 'Color', 'Number' or 'String' ")
        }
        CursorColor = value 
		
	/*
	
	*/
	block index(number n)
		validatePointer()
		return ascii(__Fl_Input__index(Ptr, n))
		
	/*
	
	*/
	block insert(string value)
		validatePointer()
		return __Fl_Input__insert(Ptr, value, 0)
		
	/*
	
	*/
	block mark()
		validatePointer()
		return __Fl_Input__mark(Ptr)
		
	/*
	
	*/
	block getCursorColor()
		return CursorColor

    /*

    */
    block setText(value)
        validatePointer()
        setValue(value)

    /*

    */
    block getText()
        return getValue()

    /*
        
    */
    block setPlatformScheme(schemeName)
        schemeName = stringValue(schemeName)
        if schemeName == FScheme.ANDROID {
            setBackground(new FColor(250,250,250))
	        setBorder(new FBorder(0,4,0,0,__FL_FLAT_BOX(),new FColor(255,106,154)))

        elif schemeName == FScheme.WINDOWS
	        setBorder(new FBorder(1,1,1,1,__FL_DOWN_BOX(),new FColor(172,172,172)))

        elif schemeName == FScheme.MACOSX
            setBorder(new FBorder(2,2,2,2,__FL_FLAT_BOX(),new FColor(197,197,197)))

        elif schemeName == FScheme.LINUX
            setBorder(new FBorder(2,2,2,2,__FL_FLAT_BOX(),new FColor(194,85,41)))

        }

    /*

    */
    block setValue(string value)
        validatePointer()
        __Fl_Input__value(Ptr,value)

    /*

    */
    block getValue()
		validatePointer()
        return __Fl_Input__value_2(Ptr)

    /*

    */
    private 

        /*

        */
        block construct()   
            setLabelAlignment(LabelAlignment)
            setBox(Box)
            setBorder(Border)
            setValue(Value)
            setLabel(Label)
            super.construct()
