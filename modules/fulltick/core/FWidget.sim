module fulltick.core call "Core.sim" call "../painting/FColor.sim" ?fulltick.painting call "../drawing/FFont.sim" ?fulltick.painting call "../../simple/security/Hash.sim" ?simple.security class FWidget PARENT_WIDGETPOINTER =null  PARENT_WIDGET =null  WIDGETPOINTER =null  WIDGET_BACKGROUND_COLOR =null  WIDGET_LABEL_COLOR =new FColor  WIDGET_FONT =new FFont  WIDGET_GROUP =null  WIDGET_HEIGHT =0  WIDGET_WIDTH =0  WIDGET_X =0  WIDGET_Y =0  WIDGET_LABEL_SIZE =10  WIDGET_LABEL_FONT =FFONT_HELVETICA  WIDGET_LABEL_TYPE =FLABEL_TYPE_NORMAL_LABEL  WIDGET_BOX_TYPE =2  WIDGET_TYPE ="WIDGET"  WIDGET_TITLE ="Simple Fulltick"  WIDGET_TOOLTIP =""  WIDGET_LABEL =""  WIDGET_SHORTCUT =null  WIDGET_CALLBACK =""  WIDGET_ISRESIZABLE =false  WIDGET_VISIBILITY =true  WIDGET_HAS_PARENT =false  WIDGET_HAS_GROUP =false  WIDGET_IS_ACTIVE =true  WIDGET_CHILDREN =[] block setSize(w,h) WIDGET_WIDTH =w WIDGET_HEIGHT =h __set_size(WIDGETPOINTER,WIDGET_WIDTH,WIDGET_HEIGHT) redrawParent() notifyWidget() return this block setWidth(w) setSize(w,WIDGET_HEIGHT) return this block setHeigth(h) setSize(WIDGET_WIDTH,h) block getWidth() return WIDGET_WIDTH block getHeigth() return WIDGET_HEIGHT block setLabel(label) WIDGET_LABEL =label __set_label(WIDGETPOINTER,WIDGET_LABEL) redrawParent()notifyWidget() return this block getLabel() WIDGET_LABEL =__get_label(WIDGETPOINTER) return WIDGET_LABEL block setLabelSize(size) WIDGET_LABEL_SIZE =size __set_label_size(WIDGETPOINTER,WIDGET_LABEL_SIZE) return this block getLabelSize() return WIDGET_LABEL_SIZE block setLabelFont(font) WIDGET_LABEL_FONT =font __set_label_font(WIDGETPOINTER,WIDGET_LABEL_FONT) return this block getLabelFont() return WIDGET_LABEL_FONT block setLabelType(type) WIDGET_LABEL_TYPE =type __set_label_type(WIDGETPOINTER,WIDGET_LABEL_TYPE) return this block getLabelType() return WIDGET_LABEL_TYPE block setLabelColor(color) if isNumber(color) WIDGET_LABEL_COLOR =new FColor WIDGET_LABEL_COLOR.setColorValue(color) else WIDGET_LABEL_COLOR =color end __set_label_color(WIDGETPOINTER,WIDGET_LABEL_COLOR.getColor()) return this block getLabelColor() return WIDGET_LABEL_COLOR block setFont(font) WIDGET_FONT =font if WIDGET_FONT.getFont()!=null setLabelFont(WIDGET_FONT.getFont()) end if WIDGET_FONT.getSize()!=null setLabelSize(WIDGET_FONT.getSize()) end if WIDGET_FONT.getColor()!=null setLabelColor(WIDGET_FONT.getColor()) end if WIDGET_FONT.getType()!=null setLabelType(WIDGET_FONT.getType()) end redrawParent()notifyWidget() return this block getFont() return WIDGET_FONT block objectResizable() WIDGET_ISRESIZABLE =true __resizable(getParent().getWidgetPointer(),WIDGETPOINTER) redrawParent()notifyWidget() return this block resizable(condition) WIDGET_ISRESIZABLE =condition display getParent().getTypeName()+" " __resizable(getParent().getWidgetPointer(),WIDGETPOINTER) redrawParent()notifyWidget() return this block setResizable(condition)return resizable(condition) block isResisable() return WIDGET_ISRESIZABLE block setBackground(color) try { color.getColor()WIDGET_BACKGROUND_COLOR =color catch WIDGET_BACKGROUND_COLOR =new FColor WIDGET_BACKGROUND_COLOR.setColorValue(color)} __set_bg(WIDGETPOINTER,WIDGET_BACKGROUND_COLOR.getColor()) redrawParent()notifyWidget() return this block getBackgroundColor() return WIDGET_BACKGROUND_COLOR block setTooltip(tip) WIDGET_TOOLTIP =tip __set_tooltip(WIDGETPOINTER,WIDGET_TOOLTIP) redrawParent()notifyWidget() return this block getTooltip() return WIDGET_TOOLTIP block setVisibility(condition) WIDGET_VISIBILITY =condition __set_visibility(WIDGETPOINTER,condition) redrawParent()notifyWidget() return this block isVisible() return WIDGET_VISIBILITY block callback(cb) WIDGET_CALLBACK =cb __on_click(WIDGETPOINTER,WIDGET_CALLBACK) return this block actionEvent(cb) WIDGET_CALLBACK =cb __on_click(WIDGETPOINTER,WIDGET_CALLBACK) return this block getCallback() return WIDGET_CALLBACK block when() block setPosition(x,y) WIDGET_X =x WIDGET_Y =y __set_position(WIDGETPOINTER,WIDGET_X,WIDGET_Y) redrawParent()notifyWidget() return this block addWidget(widget) if isList(widget) wlen =lengthOf(widget) for a =0 to wlen addWidget(widget[a]) end else addChildWidget(widget,false) end return this block addResizableWidget(widget) if isList(widget) for a =0 to lengthOf(widget) addChildWidget(widget[a],true) end else addChildWidget(widget,true) end return this block getWidgetPointer() return WIDGETPOINTER block getWidgetChildren() return WIDGET_CHILDREN block getAddedWidgets() return WIDGET_CHILDREN block getTypeName() return WIDGET_TYPE block setTypeName(type) WIDGET_TYPE =type return this block toString() return "["+WIDGET_TYPE+"["+WIDGET_WIDTH+":"+WIDGET_HEIGHT+"]["+WIDGET_X+":"+WIDGET_Y+"]"+"]" block getHash() return hash(WIDGET_TYPE) block setShortcut(shortcut) WIDGET_SHORTCUT =shortcut if (shortcut ==7676) __input_shortcut(WIDGETPOINTER,WIDGET_SHORTCUT) else __input_shortcut(WIDGETPOINTER,WIDGET_SHORTCUT) end return this block getShortcut() return WIDGET_SHORTCUT block setBoxType(type) WIDGET_BOX_TYPE =type __widget_box(WIDGETPOINTER,type) block box(type)return setBoxType(type) block getBoxType() return WIDGET_BOX_TYPE block getBox()return getBoxType() block hasParent() if WIDGET_HAS_PARENT  return true else  return false  end block setParentPointer(parent) WIDGET_HAS_PARENT =true PARENT_WIDGETPOINTER =parent block setParent(parent) WIDGET_HAS_PARENT =true PARENT_WIDGET =parent  block getParentPointer() return PARENT_WIDGETPOINTER block getTrueParentPointer() return __get_parent_widget(WIDGETPOINTER) block getParent() return PARENT_WIDGET  block getTrueParent() nwp =new FWidget nwp.setWidgetPointer(getTrueParentPointer()) return nwp  block setWidgetPointer(pointer) WIDGETPOINTER =pointer block redraw() try __redraw_widget(WIDGETPOINTER)catch end block redrawParent() if hasParent()__redraw_widget_parent(WIDGETPOINTER)end block forceRedrawParent() __redraw_widget_parent(WIDGETPOINTER) block setGroup(group) WIDGET_GROUP =group WIDGET_HAS_GROUP =true block getGroup() return WIDGET_GROUP block activate(condition) WIDGET_IS_ACTIVE =condition __activate_deactivate_widget(WIDGETPOINTER,WIDGET_IS_ACTIVE) block isActive() return WIDGET_IS_ACTIVE private  block notifyWidget()redraw() block addChildWidget(widget,condition) widget.setParent(this) __add_widget(WIDGETPOINTER,widget.getWidgetPointer(),condition) add(WIDGET_CHILDREN,widget)