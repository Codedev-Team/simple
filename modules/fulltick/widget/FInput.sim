module fulltick.widget call "../painting/FColor.sim" ?fulltick.painting call "./FBox.sim" ?fulltick.widget class FInput :FBox INPUT_WIDGET_TEXT_COLOR =new FColor  WIDGET_WIDTH =300  WIDGET_HEIGHT =30  WIDGET_Y =10  INPUT_WIDGET_MAXIMUM_SIZE =100000000  INPUT_WIDGET_TEXT_FONT =0  INPUT_WIDGET_TEXT_SIZE =12  WIDGET_CURSOR_COLOR =new FColor  INPUT_WIDGET_IS_READ_ONLY =false  INPUT_WIDGET_TAB_NAV =true  INPUT_WIDGET_WRAPS =false  INPUT_WIDGET_VALUE =""  block FInput(text) initialize() setText(text) block clear() setText("") block setTitle(text) setLabel(text) return this block copy() return __input_copy(WIDGETPOINTER,1,true) block copyToClipboard(clipboard) return __input_copy(WIDGETPOINTER,clipboard,true) block copyCut() return __input_copy(WIDGETPOINTER,null,false) block setCursorColor(color) try { color.getColor()WIDGET_CURSOR_COLOR =color catch WIDGET_CURSOR_COLOR =new FColor WIDGET_CURSOR_COLOR.setColorValue(color)} __set_input_cursor_color(WIDGETPOINTER,WIDGET_CURSOR_COLOR.getColor()) return this block getCursorColor() return WIDGET_CURSOR_COLOR block cut() copy() return __input_cut(WIDGETPOINTER,0,0,1) block deleteSelected() return __input_cut(WIDGETPOINTER,0,0,1) block delete()deleteSelected() block deleteFromPositionTo(index) return __input_cut(WIDGETPOINTER,index,0,2) block deleteAt(startindex,endindex) return __input_cut(WIDGETPOINTER,startindex,endindex,3) block index(index) return __get_input_index(WIDGETPOINTER,6) block insert(value) __input_insert(WIDGETPOINTER,value,-1) return this block insertTo(value,index) if index >lengthOf(value)index =lengthOf(value)+1 end __input_insert(WIDGETPOINTER,value,index) return this block mark() return __input_mark(WIDGETPOINTER,0,true) block setMark(index) return __input_mark(WIDGETPOINTER,index,false) block setMaximumSize(size) INPUT_WIDGET_MAXIMUM_SIZE =size __input_maximum_size(WIDGETPOINTER,INPUT_WIDGET_MAXIMUM_SIZE) return this block getMaximumSize() return INPUT_WIDGET_MAXIMUM_SIZE block cursorPosition() return __input_position(WIDGETPOINTER,0,0,1) block cursorPositionAt(cursorindex,markindex) return __input_position(WIDGETPOINTER,cursorindex,markindex,0) block setCursorPosition(index) return __input_position(WIDGETPOINTER,index,0,3) block setReadOnly(condition) INPUT_WIDGET_IS_READ_ONLY =condition  __input_read_only(WIDGETPOINTER,INPUT_WIDGET_IS_READ_ONLY) return this block isReadOnly() return INPUT_WIDGET_IS_READ_ONLY block replace(f,t,value) __input_replace(WIDGETPOINTER,f,t,value) return this block replaceSelected(value) f =mark() t =cursorPosition() __input_replace(WIDGETPOINTER,f,t,value) block size() return __input_size(WIDGETPOINTER) block setStaticValue(value) __input_static_value(WIDGETPOINTER,value) return this block setTabNav(condition) INPUT_WIDGET_TAB_NAV =condition __input_tab_nav(WIDGETPOINTER,INPUT_WIDGET_TAB_NAV) return this block tabChangeFocus() return INPUT_WIDGET_TAB_NAV block setTextColor(color) try { color.getColor()INPUT_WIDGET_TEXT_COLOR =color catch INPUT_WIDGET_TEXT_COLOR =new FColor INPUT_WIDGET_TEXT_COLOR.setColorValue(color)} __input_text_color(WIDGETPOINTER,INPUT_WIDGET_TEXT_COLOR.getColor()) redraw() return this block getTextColor() return INPUT_WIDGET_TEXT_COLOR block setTextFont(font) INPUT_WIDGET_TEXT_FONT =font __input_text_font(WIDGETPOINTER,INPUT_WIDGET_TEXT_FONT) redraw() return this block getTextFont() return INPUT_WIDGET_TEXT_FONT block setTextSize(size) INPUT_WIDGET_TEXT_SIZE =size __input_text_size(WIDGETPOINTER,INPUT_WIDGET_TEXT_SIZE) redraw() return this block getTextSize() return INPUT_WIDGET_TEXT_SIZE block setFont(font) block getFont() block getValue() return __input_value(WIDGETPOINTER,true,"") block getText() return getValue() block setValue(value) INPUT_WIDGET_VALUE =value __input_value(WIDGETPOINTER,false,INPUT_WIDGET_VALUE) return this block setText(text) return setValue(text) block clearValue() setValue("") return this block clearText()return clearValue() block undo() __input_undo(WIDGETPOINTER) return this block isWrapping() return __input_wrap(WIDGETPOINTER,true,INPUT_WIDGET_WRAPS) block wrap(condition) INPUT_WIDGET_WRAPS =condition __input_wrap(WIDGETPOINTER,false,INPUT_WIDGET_WRAPS) return this block initialize() WIDGETPOINTER =__init_input(WIDGET_X,WIDGET_Y,WIDGET_WIDTH,WIDGET_HEIGHT)