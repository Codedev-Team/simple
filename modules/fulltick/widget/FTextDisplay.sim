module fulltick.widget call "./FGroup.sim" ?fulltick.widget call "../raw/FTextBuffer.sim" ?fulltick.raw class FTextDisplay :FGroup setTypeName("FTextDisplay") WIDGET_HEIGHT =200  WIDGET_WIDTH =300  FTEXTDISPLAY_WIDGET_SCROLLBAR_WIDTH =17  FTEXTDISPLAY_WIDGET_CARET_STYLE =NORMAL_CARET  FTEXTDISPLAY_WIDGET_LINENUMBER_ALIGNMENT =FALIGN_LEFT  FTEXTDISPLAY_WIDGET_LINENUMBER_FONT =FFONT_COURIER  FTEXTDISPLAY_WIDGET_LINENUMBER_SIZE =15  TEXT_DISPLAY_WIDGET_HAS_BUFFER =false  FTEXTDISPLAY_WIDGET_LINENUMBER_IS_ENABLE =false  TEXTDISPLAY_WIDGET_CARET_VISIBILITY =false  FTEXTDISPLAY_WIDGET_CURSOR_COLOR =new FColor  FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND =new FColor  FTEXTDISPLAY_WIDGET_LINENUMBER_TEXT_COLOR =new FColor  FTEXTDISPLAY_WIDGET_TEXT_COLOR =new FColor  TEXT_DISPLAY_WIDGET_BUFFER =null  FTEXTDISPLAY_WIDGET_LINENUMBER_FORMAT =""  block FTextDisplay() init() initTextBuffer() setBuffer(TEXT_DISPLAY_WIDGET_BUFFER) block setBuffer(buffer) TEXT_DISPLAY_WIDGET_BUFFER =buffer __text_display_buffer(WIDGETPOINTER,TEXT_DISPLAY_WIDGET_BUFFER.getBufferPointer()) TEXT_DISPLAY_WIDGET_HAS_BUFFER =true return this block getBuffer() return TEXT_DISPLAY_WIDGET_BUFFER block setText(text) if not hasBuffer() initTextBuffer() end  getBuffer().setText(text) return this block getText() return getBuffer().getText() block hasBuffer() return TEXT_DISPLAY_WIDGET_HAS_BUFFER block setScrollBarWidth(width) FTEXTDISPLAY_WIDGET_SCROLLBAR_WIDTH =width __text_display_scroll_bar_width(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_SCROLLBAR_WIDTH) return this block getScrollBarWidth() return FTEXTDISPLAY_WIDGET_SCROLLBAR_WIDTH block hideScrollBar() return setScrollBarWidth(0) block resetScrollBar() return setScrollBarWidth(17) block columnToX(column) return __text_display_column_to_x(WIDGETPOINTER,true,column) block xToColumn(x) return __text_display_column_to_x(WIDGETPOINTER,false,x) block positionToX() return __text_display_column_to_x(WIDGETPOINTER,false,getPosition()) block countLinesWithCon(start,endd,condition) return __text_display_count_lines(WIDGETPOINTER,start,endd,condition) block countLines(start,endd) return countLinesWithCon(start,endd,false|true) block totalLines() return countLines(0,getBuffer().getTextLength()) block setCursorColor(color) try { color.getColor()FTEXTDISPLAY_WIDGET_CURSOR_COLOR =color catch FTEXTDISPLAY_WIDGET_CURSOR_COLOR =new FColor FTEXTDISPLAY_WIDGET_CURSOR_COLOR.setColorValue(color)} __text_display_cursor_color(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_CURSOR_COLOR.getColor()) return this block setCaretColor(color)return setCursorColor(color) block getCursorColor() return FTEXTDISPLAY_WIDGET_CURSOR_COLOR block getCaretColor() return getCursorColor() block setCaretStyle(style) FTEXTDISPLAY_WIDGET_CARET_STYLE =style __text_display_cursor_style(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_CARET_STYLE) return this block getCaretStyle() return FTEXTDISPLAY_WIDGET_CARET_STYLE block setCaretVisibility(condition) if condition  __text_display_cursor_visibility(WIDGETPOINTER,condition) else __text_display_cursor_visibility(WIDGETPOINTER,-1) end TEXTDISPLAY_WIDGET_CARET_VISIBILITY =condition return true block getCaretVisibility() return TEXTDISPLAY_WIDGET_CARET_VISIBILITY block inSelection(start,endd) return __text_display_in_selection(WIDGETPOINTER,start,endd) block insert(text) __text_display_insert(WIDGETPOINTER,-1,text) return this block getInsertPosition() return __text_display_insert(WIDGETPOINTER,-2,null) block getPosition() return getInsertPosition() block getCaretPosition() return getInsertPosition() block setInsertPosition(position) __text_display_insert(WIDGETPOINTER,position,null) return this block insertAt(position,text) formerPosition =getInsertPosition() setInsertPosition(position) insert(text) return setInsertPosition(formerPosition) block insertAtBeginning(text) return insertAt(0,text) block insertAtEnding(text) return insertAt(getBuffer().getTextLength(),text) block insertAtLineStart(text) return insertAt(getLineStart(),text) block insertAtLineEnd(text) insertAt(getLineEnd(),text) block getLineStartAt(index) return __text_display_line_start_end(WIDGETPOINTER,index,-1) block getLineStart() return getLineStartAt(getCaretPosition()) block getLineEndAt(index) return __text_display_line_start_end(WIDGETPOINTER,index,true) block setLineNumberWidth(width) if width ==0 FTEXTDISPLAY_WIDGET_LINENUMBER_IS_ENABLE =false  else FTEXTDISPLAY_WIDGET_LINENUMBER_IS_ENABLE =true end __text_display_line_number_width(WIDGETPOINTER,width) redraw() return this block showLineNumber() return setLineNumberWidth(20) block hideLineNumber() setLineNumberWidth(0) block isLineNumberEnabled() return FTEXTDISPLAY_WIDGET_LINENUMBER_IS_ENABLE block getLineEnd() return getLineEndAt(getCaretPosition()) block alignLineNumber(alignment) FTEXTDISPLAY_WIDGET_LINENUMBER_ALIGNMENT =alignment __text_display_line_number_align(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_LINENUMBER_ALIGNMENT) block getLineNumberAlignment() return FTEXTDISPLAY_WIDGET_LINENUMBER_ALIGNMENT block setLineNumberBackground(color) try { color.getColor()FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND =color catch FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND =new FColor FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND.setColorValue(color)} __text_display_line_number_bg_color(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND.getColor()) return this block getLineNumberBackground() return FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND block setLineNumberTextColor(color) try { color.getColor()FTEXTDISPLAY_WIDGET_LINENUMBER_TEXT_COLOR =color catch FTEXTDISPLAY_WIDGET_LINENUMBER_TEXT_COLOR =new FColor FTEXTDISPLAY_WIDGET_LINENUMBER_TEXT_COLOR.setColorValue(color)} __text_display_line_number_fg_color(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_LINENUMBER_TEXT_COLOR.getColor()) notifyWidget() return this block getLineNumberTextColor() return FTEXTDISPLAY_WIDGET_LINENUMBER_TEXT_COLOR block setLineNumberFont(font) FTEXTDISPLAY_WIDGET_LINENUMBER_FONT =font __text_display_line_number_font(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_LINENUMBER_FONT) notifyWidget() return this block getLineNumberFont() return FTEXTDISPLAY_WIDGET_LINENUMBER_FONT block setLineNumberFormat(format) FTEXTDISPLAY_WIDGET_LINENUMBER_FORMAT =format __text_display_line_number_format(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_LINENUMBER_FORMAT) notifyWidget() return this block getLineNumberFormat() return FTEXTDISPLAY_WIDGET_LINENUMBER_FORMAT block setLineNumberFontSize(size) if size =0 return this end FTEXTDISPLAY_WIDGET_LINENUMBER_SIZE =size __text_display_line_number_font_size(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_LINENUMBER_SIZE) notifyWidget() return this block getLineNumberFontSize() return FTEXTDISPLAY_WIDGET_LINENUMBER_SIZE block moveUp() __text_display_move(WIDGETPOINTER,0) return this block moveDown() __text_display_move(WIDGETPOINTER,1) return this block moveLeft() __text_display_move(WIDGETPOINTER,2) return this block moveRight() __text_display_move(WIDGETPOINTER,3) return this block nextWord() __text_display_next_word(WIDGETPOINTER) return this block overstrike(word) __text_display_overstrike(WIDGETPOINTER,word) return this block getPositionStyle(start,endd,lineindex) __text_display_position_style(WIDGETPOINTER,start,endd,lineindex) return this block positionToXY(position,x,y) return __text_display_position_to_xy(WIDGETPOINTER,position,x,y) block previousWord() __text_display_previous_word(WIDGETPOINTER) return this block redisplayRange(start,endd) __text_display_redisplay_range(WIDGETPOINTER,start,endd) return this block setTextColor(color) try { color.getColor()FTEXTDISPLAY_WIDGET_TEXT_COLOR =color catch FTEXTDISPLAY_WIDGET_TEXT_COLOR =new FColor FTEXTDISPLAY_WIDGET_TEXT_COLOR.setColorValue(color)} __text_display_text_color(WIDGETPOINTER,FTEXTDISPLAY_WIDGET_TEXT_COLOR.getColor()) notifyWidget() return this block getTextColor() return FTEXTDISPLAY_WIDGET_TEXT_COLOR block init()initialize() private  block initialize() WIDGETPOINTER =__init_text_display(WIDGET_X,WIDGET_Y,WIDGET_WIDTH,WIDGET_HEIGHT) block initTextBuffer() TEXT_DISPLAY_WIDGET_BUFFER =new FTextBuffer() TEXT_DISPLAY_WIDGET_HAS_BUFFER =true block treatLineNumberBg() setLineNumberBackground(FTEXTDISPLAY_WIDGET_LINENUMBER_BACKGROUND.getColor())